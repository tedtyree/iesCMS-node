<script language='c#' runat='server'>
	
	
public class cmsInfo
{
public string World="";
public string PageID="";

public int UserNo=-1; // DB IDX of User Record
public int UserObjID=-1; // wObjects IDX of User Record
public int UserLevel=0; // Security Level of user
public string UserID=""; // Login ID
public string UserName="";
public string LoginFlag="";
public iesJSON User=null;  // If UserNo<0 then this object is not yet populated
	
public iesJSON wiki=null;
public int wikiNotFound=0;
public string RequestedPage="";
public System.Web.SessionState.HttpSessionState Session;
public System.Web.HttpRequest Request;
public System.Web.HttpResponse Response;
public HttpApplicationState Application;
public iesDBlib.iesDB db;
public string PageHTML="";
public string TemplateHTML="";
public int MinViewLevel=99;
public string ErrMsg="";
public StringBuilder DebugOutput;

  public string UrlParam(string Param, bool TrimFlag=true) {
	string ret="";
	try { ret=(string)Request.QueryString[Param]; }
	catch { }
	if (ret==null) {ret="";}
	if (TrimFlag) { ret=ret.Trim(); }
	return ret;
  }
  
  public string FormParam(string Param, bool TrimFlag=true) {
	string ret="";
	try { ret=(string)Request.Form[Param]; }
	catch { }
	if (ret==null) {ret="";}
	if (TrimFlag) { ret=ret.Trim(); }
	return ret;
  }
  
  public string FormOrUrlParam(string Param, bool TrimFlag=true) {
	string ret=FormParam(Param,TrimFlag);
	if (ret=="") { ret=UrlParam(Param,TrimFlag); }
	return ret;
  }
  
  public void SessionLogout() {
		this.Session["World"]="";
		this.User=null;
		this.Session[this.World + "-User"]="";
		this.GetUserFields(); // This will clear the fields
		// LEGACY - CLEAR INDIVIDUAL USER FIELDS IN SESSION
		this.Session[this.World + "-UserNo"]="";
		this.Session[this.World + "-uID"]="";
		this.Session[this.World + "-uObjID"]="";
		this.Session[this.World + "-UserName"]="";
		this.Session[this.World + "-UserLevel"]="0";
		this.Session[this.World + "-LoginFlag"]="";
		this.Session[this.World + "-uWorld"]="";
		// DOES NOT call Custom -> SessionLogout  (that should be done in the Admin SessionLogout() or elsewhere)
		
//		Session["GotoPage"]=""; // Clear the 'goto' page so there is no crossover between websites.  YIKES! THIS KEEPS GotoPage from working at all.  FUTURE: put this back and check for crossover between domains/folders?
	}
  
  // GetUserFromSession()
  // If User Record has been stored, read it from the Session.  If not, we clear the User Info (fields)
  // NOTE: MUST set World prior to calling this routine.
  public void GetUserFromSession() {
	// Read USER record from SESSION (if it is missing, we get a null or error
	this.User=null;
	try {
		this.User=(iesJSON)this.Session[this.World + "-User"]; 
		} 
	catch(Exception e21) { this.User=null; }
	if (this.User==null) {
		SessionLogout();
		// FUTURE: How do we call Custom.SessionLogout() from here?
		//Custom.Exec("sessionlogout",null);
		}
	else {
		GetUserFields();
		}
  }
  
  // StoreUserInSession()
  // NOTE: Must call GetUserFields before calling this routine.
  public void StoreUserInSession() {
	this.Session[this.World + "-User"]=this.User;
	// LEGACY - STORE INDIVIDUAL USER FIELDS IN SESSION  (FUTURE: REMOVE THIS?)
	this.Session[this.World + "-UserNo"]=this.UserNo;
	this.Session[this.World + "-uID"]=this.UserID;
	this.Session[this.World + "-uObjID"]=this.UserObjID;
	this.Session[this.World + "-UserName"]=this.UserName;
	this.Session[this.World + "-UserLevel"]=this.UserLevel;
	this.Session[this.World + "-LoginFlag"]=this.LoginFlag;
  }
  
  // GetUserFields()
  // NOTE: this.User should be set to a User Record (iesJSON) prior to calling this method
  public void GetUserFields() {
    if (this.User==null) {
		// If not filled in, then we have a problem.
		this.UserNo=-1;
		this.UserObjID=-1;
		this.UserLevel=0;
		this.UserID="";
		this.UserName="";
		this.LoginFlag="";
		return; 
		}  
	this.UserNo=this.User["UserNo"].ToInt(); // DB IDX of User Record
	this.UserObjID=this.User["ObjID"].ToInt(); // wObjects IDX of User Record
	this.UserLevel=this.User["Level"].ToInt(); // Security Level of user
	this.UserID=this.User["uID"].CString(); // Login ID
	this.UserName=this.User["uName"].CString();
	
	if ((this.UserNo>=0) && (this.UserID!="")) { 
		this.LoginFlag="Y"; }
	else {
		this.LoginFlag=""; }
  }
}

public class cmsReturn
{
	public string Tag="";
	public string Param1="";
	public string Param2="";
	public string Param3=""; // These are needed for new code in CustomFunctions
	public string Param4=""; // These are needed for new code in CustomFunctions
	public string ReturnContent="";
	public bool Processed;
}

public class cmsAdmin
{
	public cmsInfo cms;
	//EDITLIST
	string editlistconfig="", editlisterror=""; // editlistconfig is only filled in when config has been loaded successfully 
	iesJSON editlistj=null;
	
	/* ALLOW ADMIN TO CALL cmsCustom directly. */
	public cmsCustom Custom;
	
	//public void setCustom(cmsCustom newCustom) {
	//	Custom=newCustom;
	//	Custom.cms=cms;  // cmsCustom and cmsAdmin will share the same cmsInfo object.
	//	}
	
    public void AdminTags(cmsReturn ret)
    {
		//cms.Response.Write("DEBUG: userlevel=" + cms.UserLevel + "<br>"); // DEBUG
        ret.Processed = true;
        StringBuilder Content = new StringBuilder();
		//Content.Append("DEBUG: Tag=" + ret.Tag + "(" + ret.Param1 + "," + ret.Param2 + " )<br>");  //DEBUG
		try {
          switch (ret.Tag) {
			case "brand":
			case "brandid":
				string b=SITE.BrandID;
				if (String.IsNullOrEmpty(b)) { b=SERVER.BrandID; }
				Content.Append(b);
				break;
			case "v":
				Content.Append(SITE.ScriptVersion);
				break;
			case "expirepage":
				cms.Response.Cache.SetExpires(DateTime.Now.AddSeconds(1));
				cms.Response.Cache.SetCacheability(HttpCacheability.Public);
				cms.Response.Cache.SetValidUntilExpires(true);
				cms.Response.Expires = -1;
				break;
				
			case "js":
			case "javascript":
				// *** Include the main javascript file or link (or multiple if needed)
				// *** NOTE: Including the js directly is done so that we can replace [[Tags]] - otherwise use a <script> tag in the html for efficiency.
				Content.Append(ReadJavascript(ret.Param1));
				break;
				
            case "title":   // This is actually not needed since the tag [[Title]] would be translated in 'default' below.  But here it is an example.
				Content.Append(cms.wiki["Title"].CString());
				break;
			case "logged_in":
				// *** Display User Logged-In info
				if (UserLoggedIn()) {
					Content.Append("<span class='user'>User: " + cms.UserName + "&nbsp;&nbsp;</span><a href='/" + cms.World + "/" + SITE.LOGIN_Page + ".ashx?logout=true' class='logout'>Logout</a>");
				} else {
					Content.Append("<a href='/" + cms.World + "/" + SITE.LOGIN_Page + ".ashx?logout=true' class='login'>Login</a>");
				}
				break;
			case "menu":
				// Leave ret.Processed=true - Even if the below fails, we do not want this parameter to fall through to another layer because we matched the tag.
				string MenuName=ret.Param1.Trim();
				if (MenuName=="") { MenuName=SITE.DefaultMenu; }
				if (MenuName=="") { MenuName="main"; }
				// Look for menu in the template folder.
				try {
					string menuPath=SITE.TemplateFolder + "\\menu_" + MenuName + ".cfg";
					if (!File.Exists(menuPath)) { menuPath=SERVER.TemplateFolder + "\\menu_" + MenuName + ".cfg"; }
					Content.Append(File.ReadAllText(menuPath));
					} catch { }
				break;
				
			case "page":
			case "pageid":
				Content.Append(cms.PageID);
				break;
				
			case "formparam":
				Content.Append(cms.FormParam(ret.Param1.Trim()));
				break;
				
			case "urlparam":
				Content.Append(cms.UrlParam(ret.Param1.Trim()));
				break;
				
			case "formorurlparam":
				Content.Append(cms.FormOrUrlParam(ret.Param1.Trim()));
				break;
				
			case "subpage":
				// Leave ret.Processed=true - Even if below fails, we matched tag...
				// FUTURE: Handle ability to read Wiki objects here, too (currently, subpage must be a file)
				string subPage="", subFileName;
				subFileName=SITE.PageFolder + "\\" + ret.Param1 + ".cfg";
				//Content.Append("DEBUG: subFileName=" + subFileName + "<br>");  // DEBUG
				if (!File.Exists(subFileName)) { subFileName=SERVER.PageFolder + "\\" + SITE.BrandID + "\\" + ret.Param1 + ".cfg"; }
				if (!File.Exists(subFileName)) { subFileName=SERVER.PageFolder + "\\" + ret.Param1 + ".cfg"; }
				if (File.Exists(subFileName)) {
					try {	
						subPage=File.ReadAllText(subFileName);
						// quick and dirty... remove [[{ ... }]]
						int p=subPage.IndexOf("}]]");
						if (p>0) { 
							string AdminEditMode="";
							try { AdminEditMode=cms.Session["AdminEditMode"].ToString().ToLower(); } catch { }
							if (AdminEditMode=="edit") {
								// If we are in edit mode - we need to check the AdminEditLevel to determine if we should create an edit button for this subpage
								try {
								  int p0=subPage.IndexOf("[[{");
								  if (p0>=0) {
									string subHeader=subPage.Substring(p0+2,p-p0-1);
									iesJSON jHead=new iesJSON(subHeader);
									int adminEditLevel=jHead["adminEditLevel"].ToInt(999);
									string objID=jHead["objid"].CString().Trim();
									if (adminEditLevel<999 && cms.UserLevel>=adminEditLevel && objID!="") {
										// User has edit permissions (and EDIT MODE is turned on)
										subPage="<div class='adminEditDiv'><input type='button' onClick='OpenAdminEditPage(" + objID + ");'></div>" + subPage;
									}
								  }
								} catch { }
							}
							subPage=substr(subPage,p+3,subPage.Length); }  // NOTE: if length is longer than what is needed, substr returns entire remainder of string.
						}
					  catch { }
					}
				Content.Append(subPage);
				break;
			case "track":
				// Look for track.cfg in the template folder.
				try {
					string filePath=SITE.TemplateFolder + "\\track.cfg";
						Content.Append(File.ReadAllText(filePath));
					} catch { }
				
				break;
			case "imageviewercollection":
				//iesJSON imageList=new iesJSON("[]");
				//imageList.AddToArrayBase("scott");
				//imageList.AddToArrayBase("Ted");
				//Content.Append(imageList.jsonString);
				//break;
			case "admin_block":
				string sBlockPath="", GenAdminBlock="", sName="";
				if (cms.UserLevel>=SITE.MinAdminLevel) { 
					//*** IF WE ARE LOGGED IN AND THIS PERSON HAS PRIVILEDGES... Allow edit of Wiki page.  (future, check if page is editable?!)
					//*** Here we reference admin_main.cfg  (or if [[admin_block:alias]] specified then admin_alias.cfg)	
					sName=ret.Param1.Trim();
					if (sName=="") { sName="block"; }
					sBlockPath= SITE.TemplateFolder + "\\admin_" + sName + ".cfg";
					//Content.Append("DEBUG: Looking for [" + sBlockPath + "]");
					if (File.Exists(sBlockPath)) {
						Content.Append(File.ReadAllText(sBlockPath));
					} else {
						sBlockPath=SERVER.TemplateFolder + "\\admin_" + sName + ".cfg";
						if (File.Exists(sBlockPath)) {
							Content.Append(File.ReadAllText(sBlockPath));
						}
					}
				} // end if (cms.UserLevel>=SITE.MinAdminLevel)
				break;
			case "admin_menulink_flag":
				Content.Append("true");
				break;
			case "admin_editpage_flag":
				// Future: only show if in edit mode and user has high enough permissions to edit the page.
				Content.Append("true");
				break;
			case "edit_page_link":
				//*** This tag is to be used in the admin_block
				//*** IF WE ARE LOGGED IN AND THIS PERSON HAS PRIVILEDGES... Allow edit of Wiki page. 	
				//*** FUTURE: Check if page is editable
				if (cms.UserLevel>=SITE.MinAdminLevel) { 
					string EditURL="", LinkTitle="",tsWiki="";
					tsWiki="admin-editObject.ashx?world=" + cms.World + "&class=Edit-MainWikiPage";

					if (cms.wikiNotFound>0) {
						//*** Wiki Page is missing - link to CREATE it...
						EditURL=tsWiki + "&obj=*new*&saveas=" + cms.RequestedPage;
						LinkTitle="Create Page";
					} else {
						//*** Wiki Page exists - link to UPDATE it
						EditURL=tsWiki + "&id=" + cms.wiki["objid"].CString() + "&obj=" + cms.RequestedPage;
						LinkTitle="Edit Page";
					}

				// FUTURE: check if this is a PRODUCT page
				//if ((Product_Page<>"") && (PageID==Product_Page)) { EditURL=EditProductsURL; }

				Content.Append("<a hRef=\"#\" onClick=\"Javascript:pup=window.open('" + EditURL + "','WObjEditor','menubar=no,status=no,width=950,height=700,toolbar=no,scrollbars=yes,location=no,directories=no,resizable=yes');pup.focus();return false;\" >" + LinkTitle + "</a>");

				}
				break;
			case "admin_menu_link":
				//*** This tag is to be used in the admin_block
				if (cms.UserLevel>=SITE.MinAdminLevel) { 
					Content.Append("<a hRef='" + SITE.ADMIN_Page + ".ashx'>Admin Menu</a>");
				}
				break;
			case "err_block":
			case "error_block":
				string errText=cms.Session["errmsg"].ToString().Trim();
				if (errText=="") { errText=cms.ErrMsg; }
				if (errText!="") {
					Content.Append("<div class='error_block'>" + errText + "<div>");
				}
				break;
			case "admin-get-editlistconfig":
				Content.Append(editlistconfig);
				break;
			case "admin-load-editconfig":
				// This tag will load the editor config file if needed.  A response will be generated if there is an error.
				// This tag is not mandatory, but it enables the display of a user-friendly response and it allows
				// an override of the eclass config file name (Param1)
				LoadEditListIfNeeded(ret.Param1);
				if (editlisterror!="") {
					Content.Append("<div id='adminerror'>ERROR: " + editlisterror + "</div>");
				}
				break;
			case "admin-editlist-table": {
				string filePath2,tableHtml;
				string cols="",colsHtml="",jsCols="";
				iesJSON rTags=new iesJSON("{}");
				
				// Look for editlist table HTML config file in the SERVER src folder.
				try {
					filePath2=SERVER.SourceFolder + "\\admin-editlist-table.cfg";
					tableHtml=File.ReadAllText(filePath2);
					} catch { tableHtml="<br><br>ERROR: Failed to load table config.  [err3498]<br><br>"; }
				LoadEditListIfNeeded();
				GetColumns(ref cols,ref colsHtml,ref jsCols);
				
				// Insert data into HTML
				rTags["eclass"].Value=cms.UrlParam("eclass");
				//rTags["editlist-header"].Value=colsHtml;
				rTags["editlist-columns"].Value=jsCols;
				rTags["editlist-primarykey"].Value=editlistj["PrimaryKey"].CString();
				string orderby2=editlistj["OrderBy2"].CString().Trim();
				if (orderby2!="") { rTags["editlistorderby"].Value=",order: " + orderby2; }
				Content.Append(Util.ReplaceTags(tableHtml,rTags,true,"{{","}}"));
				} break;
			case "admin-editlist-data": 
				// Return item/record data in JSON form
				GenerateJsonData(Content);
				break;
			case "admin-editlist-buttons": 
				// Create the Save/Close buttons, but only if specified in the eclass config
				// Values that can be specified in SpecialFlags: SaveButton, CancelButton, SaveCloseButton, DeleteButton
				GenerateFormButtons(Content);
				break;
			case "admin-editlist-form": {
				GenerateForm(Content);
				} break;
			case "admin-editlist-save": {
				SaveEditForm(Content);
				} break;
			case "admin-editconfig": {
				GenerateEditConfig(Content);
				} break;
			case "admin-editrecord": { // FUTURE: Why are we using this and not admin-editlist-form?
				GenerateEditRecord(Content);
				} break;
			case "admin-saveconfig": {
				SaveConfig(Content);
				} break;
            case "admin_autofill":
                string autofillTable = cms.FormOrUrlParam("table");
                string autofillField = cms.FormOrUrlParam("field");
                string autofillType = cms.FormOrUrlParam("type");
                string autofillSubField = cms.FormOrUrlParam("subfield");
                iesJSON autofill = new iesJSON("{}");
                autofill["success"].Value = "false";
                autofill["data"].Value = "";

                string autoFillData = GenerateAutofillForm(autofillTable,autofillField,autofillType,autofillSubField);
                if (!String.IsNullOrWhiteSpace(autoFillData)){
                    autofill["success"].Value = "true";
                    autofill["data"].Value = autoFillData;
                }
                Content.Append(autofill.jsonString);
                break;
			case "ifuserlevel": 
			case "ifnotuserlevel":
				bool pFlag=false;
				int paramLvl = 999;
				try { paramLvl=Int32.Parse(ret.Param1); } catch {paramLvl=999;}
				if (cms.UserLevel>=paramLvl) { pFlag=true; }
				if (ret.Tag=="ifnotuserlevel") { pFlag=!pFlag; } // invert true/false
				if (pFlag) { Content.Append(ret.Param2); }
				//cms.Response.Write("DEBUG: user level=" + cms.UserLevel + ", paramLvl=" + paramLvl + ", pFlag=" + pFlag.ToString() + "<br><br>");
				break;
			case "ifuserisadmin": 
			case "ifnotuserisadmin":
				bool admFlag=false;
				if (cms.UserLevel>=SITE.MinAdminLevel) { admFlag=true; }
				if (ret.Tag=="ifnotuserisadmin") { admFlag=!admFlag; } // invert true/false
				if (admFlag) { Content.Append(ret.Param1); }
				break;
			case "errmsg":
				try { Content.Append(cms.Session["errmsg"].ToString()); } catch { }
				break;
			default:
				if(cms.wiki.Contains(ret.Tag)) {
					Content.Append(cms.wiki[ret.Tag].CString());
					}
				else { ret.Processed=false; }
				// else we replace the tag with "" string - which is already in Content, so there is nothing to do here.
				break;
          } // End switch
		} // End Try
		catch { ret.Processed=false; }  // Error occurred processing Tag.  FUTURE: Flag Error/Record Error
        if (ret.Processed == true) { ret.ReturnContent = Content.ToString(); }

    }  // End AdminTags()
	
	static public string substr(string tStr,int nStart,int len) {
		string s="";
		if ((len<=0) || (nStart>=tStr.Length)){ return(""); }
		if (tStr.Length<(nStart+len)) {return(tStr.Substring(nStart));}
		try { s=tStr.Substring(nStart,len); return(s); } catch { }
		return ("");
		}
		
	static public string substr(string tStr,int nStart) {
		string s="";
		if (nStart>=tStr.Length) { return(""); }
		try { s=tStr.Substring(nStart); return(s); } catch { }
		return ("");
		}
		
	/* ******************************************** SUPPORT ROUTINES *********************************** */
	public string ReadJavascript(string subTag) {
	// *** This script find the specified .js file and returns its content
	// *** (to be included in the HTML response stream)
	// *** .js file may be in the Template Folder or the Root folder.
	string ret="";
	string strFile=subTag;
	if (strFile.Trim()=="") { strFile=SITE.DefaultJS; }  //FUTURE: Put "main" as a parameter Default_JS in config file
	strFile=strFile + ".js";
	
	Util.ReadFileFrom(strFile,
		new string[] {SITE.SourceFolder,SITE.ConfigFolder,SITE.WorldFolder,SERVER.SourceFolder,SERVER.ConfigFolder},  
		ref ret);
		
	if (ret!="") {
		ret="<SCRIPT type=\"text/javascript\" LANGUAGE=\"JavaScript\">\n" + 
			"<!" + "--\n" + ret + "// --" + ">\n" + "<" + "/SCRIPT>\n";
		}
		
	return ret;
	
	} // End Function
   
    // LoadJsonConfig()
    // storeInApplication: Indicates that we should first see if the item is already loaded in the Application collection.  If not, load from file and store in Application for next time.
	// forceLoad: Causes us to ignore previously loaded configs and always load from the file.
    public iesJSON LoadJsonConfig( string cfgFileName, bool forceLoad=false, bool storeInApplication=true ) {
		iesJSON cfg=null;
		// Check if there is a config already loaded in the APPLICATION library
		bool ReportConfigured=false;
		string cfgAppTag = "cfg_" + cfgFileName;
		string cfgFilePath = SITE.ConfigFolder + "\\" + cfgFileName + ".cfg";
		string loaded=null;
		
		if (forceLoad==false && storeInApplication==true) {
			loaded=(string)cms.Application[cfgAppTag + "_loaded"] ?? String.Empty;
			if (loaded!=SITE.ScriptVersion) { loaded=null; }
		}
		
		if (!String.IsNullOrEmpty(loaded)) {
			// This indicates that the config for this report is already loaded into the APPLICATION space
			cfg=(iesJSON)cms.Application[cfgAppTag];
		} else {
		  // Check if there is a report config file for this report
		  try {
			if (File.Exists(cfgFilePath)) {
			  cfg=new iesJSON();
			  cfg.UseFlexJson=true;
			  cfg.DeserializeFile(cfgFilePath);
			  if (cfg.Status!=0) {
					//if (SITE.DebugMode>0) { Content.Append("WARNING: Config failed to load. [err1914][" + cfgFileName + "," + cfg.Status + "]<br>"); }
					cfg=iesJSON.CreateErrorObject();
					return cfg;
				}
			  }else{
			    //if (SITE.DebugMode>0) { Content.Append("WARNING: Config failed to load. [err1915][" + cfgFileName + "," + cfg.Status + "]<br>"); }
                cfg=iesJSON.CreateErrorObject();
                return cfg;
			  }
		  } catch (Exception exsp){
			cfg=iesJSON.CreateErrorObject();
			//if (SITE.DebugMode>0) { Content.Append("WARNING: Config failed to load. [err1916][" + cfgFileName + "]<br>" + exsp.ToString() ); return;}
			return cfg;
			}
		  if (!(cfg==null) && storeInApplication) {
			// Store config for next time
			cms.Application[cfgAppTag]=cfg;
			cms.Application[cfgAppTag + "_loaded"]=SITE.ScriptVersion;
			}
		}
		if (cfg==null) { cfg=iesJSON.CreateErrorObject(); }  // Last minute safety check.
		return cfg;
	}

	
	/* ******************************************** LOGIN SESSION ************************************** */
	
	public bool UserLoggedIn() {
		bool ret=false;
		if (cms.World.Trim()!="") {
			// Even though the LoginFlag should be a good enough indicator, here we check that there is a UserNo set as well.
			if ((cms.LoginFlag=="Y") && (cms.UserNo>=0)) { ret=true; }
		}
		return ret;
	}
	
	public bool UserIsAdmin() {
		if (cms.UserLevel>=SITE.MinAdminLevel) { return true; }
		else { return false; }
	}
	
	// Get UserNo (unique index identifier of User).  If not found, return -99  (Note: -2 is a valid admin userno)
	// FUTURE: THIS ROUTINE IS OBSOLETE NOW THAT WE GET THE USER INFO AT THE START OF DEFAULT.ASPX
	public int GetUserNo() {
		// First lets see if our cms has been initialized with the user info
		// (if not, then call cms.GetUserFromSession()
		int ret=cms.UserNo;
		if (ret<=0) {
			// FUTURE: Remove this and force each use of cms to call cms.GetUserFromSession()?
			// For now we get the UserNo from the session variable (old methodogy)
			ret=-99;
			try { ret=Util.ToInt(cms.Session[cms.World + "-UserNo"].ToString(),-99); } catch {ret=-99;}
		}
		return ret;
	}
	
	// LEGACY - THIS SHOULD NOW BE CALLED AS PART OF THE cms OBJECT
	// Left the method here for legacy compatibility
	public void SessionLogout() {
		cms.SessionLogout(); // CustomFunctions Logout - specific to each website
	}
	
	public void SessionLogin(string Login_ID, String Login_Pwd) {

		// Login Request - User: admin
		// FUTURE: REMOVE THIS BACKDOOR LOGIN?
		if ((Login_ID.Trim().ToLower()=="dev") && (Login_Pwd.Trim()=="clay999J") ) {
			cms.Session["World"]=cms.World;
			// Create a fake user record...
			cms.User=new iesJSON("{\"UserNo\":0,\"ObjId\":-2,\"uID\":\"dev\",\"Level\":7,\"UserName\":\"" + Login_ID.Trim() + "\"}");
			cms.GetUserFields();
			cms.StoreUserInSession();
			// OLD METHOD - STORE INDIVIDUAL USER FIELDS IN SESSION  (FUTURE: REMOVE THIS?)
			//cms.Session[cms.World + "-UserNo"]="-2";
			//cms.Session[cms.World + "-uID"]="dev";
			//cms.Session[cms.World + "-uObjID"]=-2;
			//cms.Session[cms.World + "-UserName"]=Login_ID.Trim();
			//cms.Session[cms.World + "-UserLevel"]="7";
			//cms.Session[cms.World + "-LoginFlag"]="Y";
			cms.Session[cms.World + "-uWorld"]="bdadmin";  // FUTURE: Is this still needed?
		}
		
        // LOOK UP DATABASE MEMBERS...
		string sql, sLevel, Login_ID2;
	  
		sLevel="Level";
		sLevel="`Level`"; // if (db.DBClass=="mysql") { sLevel="`Level`"; } // FUTURE: Get this check working in case in the future we are using SQLserver
		Login_ID2="'" + Login_ID.Replace("'","''") + "'";
	  
		// *** FIRST ATTEMPT TO LOGIN USING uID (For large lists, make sure there is a key on Members(uID))
		// Use * to select from the members table because some versions contain a field "expiration" and others do not
		sql="SELECT * FROM members " +
			" WHERE uID=" + Login_ID2 + " AND Status='Active'" +
			" AND (WorldID='" + cms.World + "') AND uID IS NOT NULL";
//cms.Response.Write("DEBUG: SQL=" + sql + " [" + Login_Pwd + "]<br>");
//cms.Response.Flush();
		if (SessionLogin2(sql,Login_Pwd)==true) {
			// Successful Login
			return;
		}
	  
		// *** SECOND ATTEMPT TO LOGIN USING UserEmail (No index - make take a little time for large tables)
		// Use * to select from the members table because some versions contain a field "expiration" and others do not
		sql="SELECT * FROM members " +
			" WHERE UserEmail=" + Login_ID2 + " AND Status='Active'" +
			" AND (WorldID='" + cms.World + "') AND uID IS NOT NULL";

		if (SessionLogin2(sql,Login_Pwd)==true) {
			// Successful Login
			return;
		}

		// check for BackDoor login (bdadmin)
		//sql="SELECT UserNo, uID, ObjID, uName, PWD, WorldID, Expiration, " + sLevel + " FROM members " +
		sql="SELECT * FROM members " +
			" WHERE uType='bdadmin' AND (uID=" + Login_ID2 + " OR UserEmail=" + Login_ID2 + ") AND Status='Active'" +
			" AND WorldID='bdadmin' AND uID IS NOT NULL";

		SessionLogin2(sql,Login_Pwd);  // *** Don't need to check for success... Session variables are set

} // End SessionLogin()

public bool SessionLogin2(string sql, string Login_Pwd) {
		bool ret;
		iesJSON pwdRS;
		int cnt=0; string n_Pwd="";
		string expiration="";
		DateTime AllowDate;

		ret=false;
		cms.db.Open();
		pwdRS=cms.db.GetDataReaderAll(sql);
		//FUTURE: check for DB Errors
//cms.Response.Write("DEBUG: pwdRS=" + pwdRS.jsonString + "<br>");
//cms.Response.Flush();
		//if (ErrMsg=="") {  // **** and wOK=True
		if (!(pwdRS==null)) {
		  foreach (iesJSON pwd in pwdRS) {
			n_Pwd="";
			// *** TEMP FUTURE - PASSWORD IS NOT CURRENTLY ENCODED
			n_Pwd=pwd["PWD"].CString();
			expiration=pwd["Expiration"].CString();
			if (String.IsNullOrWhiteSpace(expiration)){
                AllowDate = DateTime.Now.AddDays(7);
			}else{
			    if (!DateTime.TryParse(expiration, out AllowDate))
                {
                    //Invalid Date, let's make allow date our normal
                    AllowDate = DateTime.Now.AddDays(7);
                }
			}

			//CheckDBerr(ErrMsg)
//cms.Response.Write("DEBUG: n_Pwd=" + n_Pwd + " [compare=" + Login_Pwd + "]<br>");
//cms.Response.Flush();
			if ((n_Pwd!="") && (n_Pwd==Login_Pwd.Trim()) && (DateTime.Now < AllowDate)) {
//cms.Response.Write("DEBUG: MATCH! [World=" + cms.World + "]<br>");
//cms.Response.Flush();
				cms.Session["World"]=cms.World;
				cms.User=pwd; // Store USER record.
				cms.GetUserFields();
				cms.StoreUserInSession();
				// LEGACY - STORE INDIVIDUAL USER FIELDS IN SESSION  (FUTURE: REMOVE THIS?)
				//cms.Session[cms.World + "-UserNo"]=pwd["UserNo"].CString();
				//cms.Session[cms.World + "-uID"]=pwd["uID"].CString();
				//cms.Session[cms.World + "-uObjID"]=pwd["ObjID"].CString();
				//cms.Session[cms.World + "-UserName"]=pwd["uName"].CString();
				//cms.Session[cms.World + "-UserLevel"]=pwd["Level"].CString();
				//cms.Session[cms.World + "-LoginFlag"]="Y";
				//Session[cms.World + "-uWorld"]=pwd["WorldID"].CString();  // *** For admin users, the User WorldID may be different than the World we are logging into

				try {
					Custom.SessionLogin();
				}catch(Exception e){
				
				}
			
				if (cms.LoginFlag=="Y") {
					ret=true;
					break;
				} // End if
			}  // *** n_Pwd!="" && n_Pwd==Login_Pwd
			//CheckDBerr(ErrMsg)

			cnt=cnt+1;
			if (cnt>999) { break; } // *** Safety
			//if (ErrMsg!="") { break; } // *** Saftey - FUTURE
		  } // end for each
		} // if !pwdRS==null
	  // } // End if ErrMsg==""

	  cms.db.Close();
	  return ret;
	  
} // End SessionLogin2
		
	/* ******************************************** REMEMBER ME ************************************** */
	
	public void RememberMe() {
		// Check if we already have the RememberMe token
		if (((string)cms.Session["RememberMe"] + "").Trim() != "") { return; }
		// Check if we are already logged in
		if (UserLoggedIn()) { return; }
		// Get RememberMe token if needed (used later when secure page is accessed)
		if (! (cms.Request.Cookies[SITE.WPL_COOKIE] == null)) {
			cms.Session["RememberMe"] = (cms.Request.Cookies[SITE.WPL_COOKIE].Value + "").Trim();
		}
	}
/*
Public Sub RememberMeLogin()
	Dim ecRS as Object, ecDate as Object, uName as String, uPwd as String
	
	'*** Check if we are already logged in
	If UserLoggedIn() Then Exit Sub
	'*** Check if the token was retrieved or not (in RememberMe() call which should have happened already)
	If Trim(Session("RememberMe") & "")="" Then Exit Sub

	'*** Use RememberMe token to lookup record in the database
	SetPEnv()
	ecRS=pEnv.dbSrc.GetRS("SELECT UserID, Pwd, Expires, WorldID FROM wCookies WHERE Cookie='" & Session("RememberMe") & "' AND Status='Active'") 
	If not(ecRS.Read()) Then Exit Sub
	
	'*** Check expiration date
	ON ERROR RESUME NEXT
	ecDate=pEnv.wFldDate(ecRS.fGetS("Expires") & "")
	If ecDate IS Nothing Then Exit Sub  '*** Invalid Expiration Date = invalid record
	If Now() > ecDate Then Exit Sub  '*** Expired
	Err.Clear
	ON ERROR GOTO 0
	
	'*** Use database record to login
	uName=ecRS.fGetS("UserID")
	uPwd=ecRS.fGetS("Pwd")
	pEnv.SessionLogin(uName,uPwd,Session)
	wLevel=CInt2(Session(wWorld & "-UserLevel"),0)  '*** THIS IS A GLOBAL PARAMETER
End Sub

Public Sub SetRememberMe(uID as String, pwd as String)
	Dim eCookie as String, userIP as String, sid as String, sql as String, expires as Object
	'Dim uAgent as String
	
	'*** Make sure we are logged in (must be logged in before setting the RememberMe cookie)
	If Not(UserLoggedIn()) Then Exit Sub  '*** Future: indicate that this failed
	
	'*** Get details...
	userIP=Request.Servervariables("REMOTE_ADDR")
	sid=Session.SessionID
	'uAgent=LCase(Trim(Request.ServerVariables("HTTP_USER_AGENT") & ""))
	
	'*** Create the cookie on the client machine for future RememberMe usage
	expires=DateTime.Now.AddDays(365)
	eCookie=WPL_COOKIE & "-" & wDateStamp() & "-" & userIP & "-" & sid
	Response.Cookies(WPL_COOKIE).Value = eCookie
	Response.Cookies(WPL_COOKIE).Expires = expires
	'Response.Cookies(WPL_COOKIE).Domain =

	'*** Store cookie in the database
	SetPEnv()
	If Trim(uID & "")="" Then Exit Sub
	If Trim(pwd & "")="" Then Exit Sub
	If Trim(Session(wWorld & "-uWorld") & "")="" Then Exit Sub
	sql="INSERT INTO wCookies (WorldID,Cookie,UserID,Pwd,Status,Expires) VALUES ('" & Session(wWorld & "-uWorld") & "','" & eCookie & "','" & uID & "','" & pwd & "','Active'," & pEnv.dbDateTime(expires,"d",true) & ")"
	ON ERROR RESUME NEXT
	pEnv.dbSrc.ExecSQL(sql)
	err.Clear
	ON ERROR GOTO 0
End Sub
*/
public void RemoveRememberMe() {
  cms.Response.Cookies[SITE.WPL_COOKIE].Value = "";
  cms.Response.Cookies[SITE.WPL_COOKIE].Expires = DateTime.Now.AddDays(-1);
}

	// ******************************************** ReadFormFields *******************************************
    public void ReadFormFields(iesJSON FormInfo, bool CreateNewFieldList=true) {
//FUTURE : Add email generation below...
        // Read FORM fields/parameters (Fields should all have the prefix 'fld_')
 //       Dim fld As Object
//	Dim fldList as Object
	string pFld, pVal, sBold="", sBold2="", form_w="";
	const string chkBox =  "_CHECKBOX";
	StringBuilder emailOut=new StringBuilder();
	
//	SetPEnv()

//	If FORM_IsHTML=True Then 
//		sBold="<B>"
//		sBold2="</B>"
//	End If

//	emailOut.Append("********************************************************************" & vbNewLine & _
//		    "********************************************************************" & vbNewLine & _
//		    "*** " & SiteTitle & " - Web Form Submission" & vbNewLine & _
//		    "*** " & sBold & Request.Form("form_id") & sBold2 & vbNewLine & _
//		    "********************************************************************" & vbNewLine & _
//		    "********************************************************************" & vbNewLine & vbNewLine

	iesJSON objFields;
	if (CreateNewFieldList) { objFields=iesJSON.CreateEmptyObject(); }
	else { 
		// Use existing Fields object if it exists...
		objFields=FormInfo["fields"]; 
		if (objFields.jsonType!="object") { objFields=iesJSON.CreateEmptyObject(); }  // If 'fields' did not exist, create a new object (ie. list of field values)
		}
	
	// First process list of specified fields.
//        string fields=FormInfo["readfields"].CString().Trim();
//		if (fields!="") {
//	  fldList=SPlit(FORM_Fields,",")
/*
	  For Each fld in fldList
		'pVal = cms.Request.Form.Item("fld_" & fld) & ""
		pVal = cms.Request.Form.Item(fld) & ""

		'*** WORK AROUND FOR CHECK BOX!!!  (should have suffix "_CHECKBOX")
                If UCase(Right(fld, len(chkBox))) = chkBox Then
                    fld = Left(fld, len(fld) - len(chkBox))
                    If pVal <> "" Then
                        pVal = "Yes"
                    Else
                        pVal = ""
                    End If
                End If

		If LCase(fld)<>"form_id" and LCase(fld)<>"form_w" Then    '**** form_id/form_w is already included in the header/footer
		  If (Len(fld) + Len(pVal)) > 100 Then
                    '*** LONG STRING VALUE
                    strDefMsg = strDefMsg & vbNewLine & sBold & fld & sBold2 & ":" & vbNewLine & pVal & vbNewLine & vbNewLine
                  Else
                    strDefMsg = strDefMsg & sBold & fld & sBold2 & ": " & pVal & vbNewLine
                  End If
		End If
		If strFieldList<>"" Then strFieldList=strFieldList & ","
		strFieldList=strFieldList & fld
		If strParams<>"" Then strParams=strParams & "|"
		strParams=strParams & fld & "=" & pEnv.wPakSafe(pVal)

                ''*** Also put the fields into the frmObj
                'oForm.Param(pFld) = "" '*** just in case the next line fails, don't want left-over data.
                'oForm.Param(pFld) = Request.Form(pVal)

		objFields(fld)=pVal
	  Next
	} //end if (fields!="")
*/
	if (FormInfo["includeotherfields"].CString().ToLower()=="true") {
        foreach (string fld in cms.Request.Form.Keys) {
			string fld2=fld.ToLower();
			if ((fld2!="submit") && (fld2!="reset") && (fld2!="x") && (fld2!="y")) {
				pFld = fld;
                pVal = cms.Request.Form[fld].ToString();

                // *** WORK AROUND FOR CHECK BOX!!!  (should have suffix "_CHECKBOX")
                if ((substr(pFld, pFld.Length - chkBox.Length)).ToUpper() == chkBox) {
                    pFld = substr(pFld,0, pFld.Length - chkBox.Length - 1);
                    if (pVal != "") { pVal = "yes"; }
                    else { pVal = ""; }
                }

                if (!(objFields.Contains(pFld))) {

					if ((fld2!="form_id") && (fld2!="form_w")) {   // form_id/form_w is already included in the header/footer
						if ((pFld.Length + pVal.Length) > 100) {
							// LONG STRING VALUE
							emailOut.Append("<br>" + sBold + pFld + sBold2 + ":<br>" + pVal + "<br><br>"); }
						else {
							emailOut.Append(sBold + pFld + sBold2 + ": " + pVal + "<br>"); }
                   } //end if ((fld2!="form_id") && (fld2!="form_w"))

//		 			If strFieldList<>"" Then strFieldList=strFieldList & ","
//		 			strFieldList=strFieldList & pFld
//		 			If strParams<>"" Then strParams=strParams & "|"
//		 			strParams=strParams & pFld & "=" & pEnv.wPakSafe(pVal)

					objFields[pFld].Value=pVal;

				} //end if (!(objFields.ContainsKey(pFld)))
			} //end if ((fld2!="submit") && (fld2!="reset") && (fld2!="x") && (fld2!="y"))
        } //next foreach
	} //end if (FormInfo["includeotherfields"].CString().ToLower()=="true")
	

	
//	Add Footer... Indicates in the email which "World ID" this page submit came from.
	emailOut.Append("<br><br>");
	form_w=cms.FormParam("form_w");
	if (form_w.Trim().ToLower() != cms.World.Trim().ToLower()) {
		emailOut.Append("(w:" + form_w + ":" + cms.World + ")<br><br>"); 
	} else {
		emailOut.Append("(w:" + form_w + ")<br><br>");
	}

	FormInfo["fields"]=objFields;
	FormInfo["emailBody"].Value=emailOut.ToString();
	
    } //end ReadFormFields()
	
	// ******************************************** ReadFormFields *******************************************
    public string CheckCaptcha(string cpID,string cpPWD,string strWorld) {
		// FUTURE: Develop this functionality
		return "true";
		}

	// EDITLIST - future:indicate success/failure
	public void LoadEditListIfNeeded(string eClassOverride="") {
		string eclass=eClassOverride;
		editlisterror="";
		if (String.IsNullOrWhiteSpace(eclass)) { eclass=cms.UrlParam("eclass"); }
		string eclassfile="eclass-" + eclass + ".cfg";
		if (eclass!=editlistconfig) {
			//Need to load config file
			string configpath=SITE.ConfigFolder + "\\" + eclassfile;
			if (! File.Exists(configpath)) { 
				configpath=SERVER.ConfigFolder + "\\" + eclassfile;
				if (! File.Exists(configpath)) {
					editlisterror="Config file not found: " + eclassfile + " [err7971]";
					return;
					}
				}
			editlistj=new iesJSON();
			editlistj.UseFlexJson=true;
			editlistj.DeserializeFile(configpath);
			if (editlistj.Status == 0) { // no JSON errors
				editlistconfig=eclass;
			}
		}	
		if (editlistconfig == "" &&  editlisterror == "") {
				editlisterror="Failed to load config file: " + eclassfile + " [" + editlistj.Status + "][err7972]";
		}
	}
	
	// Get a list of columns (string) from an editclass config file (JSON)
	// Three output formats:
	//   outCols=csv (comma separated list)
	//   outColsHtml=html table header row
	//   jsCols=Javascript list of data field names (for jquery.datatables)
	public void GetColumns(ref string outCols, ref string outColsHtml, ref string outColsJS) {
		string sField,sTitle,sWidth,sAs,sClass,sFlags;
		StringBuilder cols=new StringBuilder();
		//StringBuilder colsHtml=new StringBuilder();
		iesJSON jsCols=new iesJSON("[]");
		iesJSON node;
		
		foreach (iesJSON fld in editlistj["SearchList"]) {
			sWidth=fld["Width"].CString().Trim();
			sField=fld["Field"].CString().Trim();
			sTitle=fld["Alias"].CString().Trim();
			sClass=fld["Class"].CString().Trim();
			sFlags=fld["Flags"].CString();
			sAs=fld["As"].CString().Trim();  // If field is a sub-query "(SELECT...) as Foo" then set As:Foo
			if(sAs=="") {sAs=sField;}  // If no AS then set AS to the field name.
			if (sTitle=="") {sTitle=sAs;}  // If no alias then set alias title to the field name.
			if (cols.Length>0) {cols.Append(",");}
			cols.Append(sField);
			if (sWidth!="" && sWidth!="0") { 
				//colsHtml.Append("<td>" + sTitle + "</td>"); 
				node=new iesJSON("{}");
				node["sTitle"].Value=sTitle.Replace("`","");   // DEBUG: + "[" + sWidth + "]";
				if (sFlags.IndexOf("l")>=0) {node["class"].Value="editRow";}
				node["data"].Value=sAs.Replace("`","");
			if (sClass!="")  {node["class"].Value=node["class"].Value + " " + sClass;}
				jsCols.AddToArrayBase(node);
				}
			}
		outCols=cols.ToString();
		//outColsHtml=colsHtml.ToString();
		outColsJS=jsCols.jsonString;
	}
	
    public string GenerateAutofillForm(string formTable, string formField, string formType, string formSubField){
        string configpath           = "";
        iesJSON config              = null;

        string Query                = "";
        iesJSON Results             = null;

        string cfgHolder            = "";
        string cfgHandler           = "";
        string cfgField             = "";

        StringBuilder FormContent   = null;

        ArrayList uniques           = null;

        FormContent = new StringBuilder();

        if (String.IsNullOrWhiteSpace(formTable) || String.IsNullOrWhiteSpace(formField) || String.IsNullOrWhiteSpace(formType)){
            return FormContent.ToString();
        }

        Query = "SELECT `" + formField + "` FROM `" + formTable + "` WHERE `" + formField + "` IS NOT NULL AND `" + formField + "` <> ''";

        cms.db.Open();
        Results = cms.db.GetDataReaderAll(Query);

        if (Results.Length == 0){
            return FormContent.ToString();
        }

        uniques = new ArrayList();
        FormContent.Append("<ul id='autofill_list' class='selectable'>");
        switch(formType){
            case "json":
                if (String.IsNullOrWhiteSpace(formSubField)){
                    return "";
                }

                foreach(iesJSON singleItem in Results){
                    iesJSON tempJson = singleItem[formField];
                    if (!uniques.Contains(tempJson[formSubField].jsonString)){
                        uniques.Add(tempJson[formSubField].jsonString);
                        FormContent.Append("<li class='fieldvalue'>" + tempJson[formSubField].jsonString + "</li>");
                    }
                }
                break;
        }
        FormContent.Append("</ul>");
        cms.db.Close();

        return FormContent.ToString();
	}
	
	public void GenerateJsonData(StringBuilder Content,string idOverride="",string eClassOverride="",bool includeHeader = true) {
		string sql3="", acols="",acolsHtml="",ajsCols="",errmsg;
		string id=idOverride;
		if (String.IsNullOrWhiteSpace(id)) {id=cms.UrlParam("id");}
		//if (id=="") { Content.Append("<br><br>ERROR: Record ID not specified. [err4336]"); return; }
		
		iesJSON jret=new iesJSON("{}");
		
		LoadEditListIfNeeded();
		if (editlistconfig=="") { return; } // no need to display error because this should have been done in the admin-load-editconfig tag
		

		string flags=editlistj["SpecialFlags"].CString().ToLower();
		GetColumns(ref acols,ref acolsHtml,ref ajsCols);

		// CHECK SECURITY LEVEL
		int Permit=EditFormSecurityLevel();  // Default=No Access
		bool bViewOnly=(Permit<=1) ? true : false;
		cms.db.Open();
		if (Permit<=0) {
			Content.Append("ERROR: Permission denied.");
			if (SITE.DebugMode>0) { Content.Append(" [UserLevel=" + cms.UserLevel.ToString() + "]"); }
			return;
			}
		  else {
		   try {
			string w = "WorldID='" + cms.World + "'";
			if (flags.IndexOf("noworldid")>=0) { w=""; }
			string w2=editlistj["Where"].CString().Trim();
			if (w2!="") { if (w!="") { w+=" AND ";} w+=w2; }
			if (w.Trim()!="") { w=" WHERE " + w; }
			string o = editlistj["OrderBy"].CString().Trim();  // For datatables this does nothing - Try OrderBy2="[ [5, 'desc' ] ]"
			if (o!="") { o=" ORDER BY " + o + " "; }
			sql3="SELECT " + acols + " FROM " + editlistj["SearchTable"].CString() + " " + w + o;
			/* DEBUG
			using (StreamWriter writer = new StreamWriter(SITE.ConfigFolder + "\\temp-SQL.txt"))
			{
				writer.Write(sql3);
			} 
			*/
			//cms.Response.Write("DEBUG: sql3=" + sql3 + "<br><br>"); //DEBUG
			iesJSON rData=cms.db.GetDataReaderAll(sql3);
			jret["msg"].Value="success";
			jret["data"]=rData;
			jret["sql"].Value=sql3; //DEBUG
			Content.Append(jret.jsonString);
			}
		catch { 
			errmsg="ERROR: Failed to get data records. [err4995]";
			if (SITE.DebugMode>0) {errmsg+=" SQL=" + sql3;}
			jret["msg"].Value=errmsg;
			jret["data"]=new iesJSON("[]");
			Content.Append(jret.jsonString);
			}
		 } // end if-else (Permit<=0)
		cms.db.Close();
    } // end function
	
	public void GenerateFormButtons(StringBuilder Content) {
		LoadEditListIfNeeded();  // This loads editlistj
		if (editlistconfig=="") { return; } // no need to display error because this should have been done in the admin-load-editconfig tag
		
		string flags=editlistj["SpecialFlags"].CString().ToLower();
		StringBuilder buttons = new StringBuilder();

		//Add Buttons to the form
		if ((flags.IndexOf("savebutton")>=0) || (flags.IndexOf("allbuttons")>=0)) {
			buttons.Append("<input class='adminbutton adminsavebutton' type='button' name='Save' value='Save' onclick='SaveItem(false);return false;'>");
		}
		if ((flags.IndexOf("saveclosebutton")>=0) || (flags.IndexOf("allbuttons")>=0)) {
			buttons.Append("<input class='adminbutton adminsaveclosebutton' type='button' name='SaveClose' value='Save/Close' onclick='SaveItem(true);return false;'>");
		}
		if ((flags.IndexOf("cancelbutton")>=0) || (flags.IndexOf("allbuttons")>=0)) {
			buttons.Append("<input class='adminbutton admincancelbutton' type='button' name='Cancel' value='Cancel/Close' onclick='CloseForm(false);return false;'>");
		}
		if ((flags.IndexOf("deletebutton")>=0) || (flags.IndexOf("allbuttons")>=0)) {
			buttons.Append("<input class='adminbutton admindeletebutton' type='button' name='Delete' value='Delete' onclick='DeleteItem();return false;'>");
		}
		if (buttons.Length>0) {
			buttons.Insert(0,"<div class='adminbuttoncontainer'>");
			buttons.Append("</div>");
			Content.Append(buttons.ToString());
		}
	}
	
	public void GenerateForm(StringBuilder Content,string idOverride="",string eClassOverride="",bool includeHeader = true) {
		string id=idOverride;
		string autoFillInfo = "";
		if (String.IsNullOrWhiteSpace(id)) {id=cms.UrlParam("id");}
		if (id=="") { Content.Append("<br><br>ERROR: Record ID not specified. [err4337]"); return; }
		
		// Set the CKEditor Upload folder based on the WORLD (DEFAULT VALUES)
		// see below where this may be overridden by the Edit Class (FUTURE)
		cms.Session["CKFinder_BaseUrl"] = "/" + cms.World + "/content/";
		
		LoadEditListIfNeeded(eClassOverride);  // This loads editlistj
		if (editlistconfig=="") { return; } // no need to display error because this should have been done in the admin-load-editconfig tag
		string title=editlistj["Title"].CString();
		if (includeHeader) { Content.Append("<h1>EDIT FORM: " + title + "</h1>"); }
		string table=editlistj["Table"].CString();
		string pk=editlistj["PrimaryKey"].CString();
		string pknumeric=editlistj["PrimaryKeyNumeric"].CString().ToLower();
		
		// If Edit Class contains CKEditor Parameters... use them...
		string sVal="";
		sVal=editlistj["UserFilesPath"].CString().Trim();
		if (sVal!="") { cms.Session["CKFinder_BaseUrl"] = sVal; }
		sVal="";
		sVal=editlistj["UserFilesDirectory"].CString().Trim();
		if (sVal!="") { cms.Session["CKFinder_BaseDir"] = sVal; }

		// CHECK SECURITY LEVEL
		int Permit=EditFormSecurityLevel();  // Default=No Access
		bool bViewOnly=(Permit<=1) ? true : false;
		
		if (Permit<=0) {
			Content.Append("<br><br>ERROR: Permission denied.");
			if (SITE.DebugMode>0) { Content.Append(" [UserLevel=" + cms.UserLevel.ToString() + "]"); }
			return;
			}
		Content.Append("<div class='msgBox' id='msgBox'></div>");
		// Get Object/Record from the database
		iesJSON jRec=null;
		string id2=id;
		string flags=editlistj["SpecialFlags"].CString().ToLower();
		bool create=false;
		if (id.ToLower()=="*new*") { create=true; }
		if (!create) {
			if (pknumeric!="true") { id2="'" + id + "'"; }
			string w=" AND WorldID='" + cms.World + "' ";
			string w2=editlistj["Where"].CString().Trim();
			if (w2!="") { w2=" AND " + w2; }
			if (flags.IndexOf("noworldid")>=0) { w=""; }
			string where=" WHERE " + pk + "=" + id2 + w + w2;
			string sql="SELECT * FROM " + table + " " + where;

			try {
				cms.db.Open();
				jRec=cms.db.GetFirstRow(sql);
				cms.db.Close();
				}
			catch (Exception e) { Content.Append("ERROR: Query record failed. [err4646]<br>"); if (SITE.DebugMode>0) { Content.Append(e.ToString());} return;}
			//Content.Append("SQL=" + sql + "<br>");//DEBUG
			if (jRec.jsonType=="null") { Content.Append("ERROR: Query failed. [err4664]<br>"); if (SITE.DebugMode>0) { Content.Append("SQL=" + sql + "<br>");} return; }
			if (jRec.Status!=0) { Content.Append("ERROR: Query failed. [err4668]<br>"); if (SITE.DebugMode>0) { Content.Append("SQL=" + sql + "<br>");} return; }
			//jRec=jRec[0]; // Get first row of returned recordset (there should only be one row)  - NO LONGER NEEDED - CHANGE TO iesDB Library TKT 5/13/2016
			if (jRec["StorFormat"].CString().ToLower()=="parampak") { UnpakParamPak(jRec); }

			//Content.Append("JSON=" + jRec.jsonString + "<br>");//DEBUG		
		} else {
			jRec=new iesJSON("{}");
			iesJSON rTags=new iesJSON("{}");
			rTags["now"].Value=DateTime.Now.ToString();
			rTags["world"].Value=cms.World;
			rTags["worldid"].Value=cms.World;
			rTags["userno"].Value=cms.UserNo;
			rTags["userid"].Value=cms.UserID;
			// Load default values into jRec
			iesJSON Defaults=editlistj["Defaults"];
			if (Defaults!=null) {
			  if (Defaults.Status==0 && Defaults.jsonType!="null") {
				foreach(iesJSON df in Defaults) {
					string dfValue=Util.ReplaceTags(df.CString(),rTags,false,"{{","}}");
					jRec.AddToObjBase(df.Key,dfValue);
				} // end foreach
			  } // end if
			} // end if
		}
		
		// Apply Override values to jRec  (these should be applied before being displayed (so user sees them if visible) and before save (to make sure they are always set)
		iesJSON Override=editlistj["Override"];
		if (Override!=null) {
		  if (Override.Status==0 && Override.jsonType!="null") {
			foreach(iesJSON ovr in Override) {
				jRec.AddToObjBase(ovr.Key,ovr);
			} // end foreach
		  } // end if
		} // end if
		
		string neededEclass = "";
		neededEclass = eClassOverride;
		if (String.IsNullOrWhiteSpace(neededEclass)) {neededEclass=cms.UrlParam("eclass");}
		
		Content.Append("<form id='editlistform'><input type='hidden' id='eClass' name='eClass' value='" + neededEclass + "'/>" +
			"<input type='hidden' id='fld_" + pk + "' name='fld_" + pk + "' value='" + id + "'/>" +
			"<TABLE border=0 width=725 cellpadding=0><TBODY>");
			
		// DISPLAY NEW RECORD BANNER if specified
		if (create && (editlistj["ShowNewBanner"].CString().Trim().ToLower()=="true")) { 
			Content.Append("<tr><td colspan=2 align=left><Font size=3 color=#309040><B>*** NEW RECORD ***</B></td></tr>");
		}
		
		// *** FIELD SET #1 - wObject RECORD fields **********************************
    
		bool ShowField;
		string sType,sWidth,sHeight,sNote,sFlags,dValue,dFieldName,sAlias,sClass;
		StringBuilder HiddenFields=new StringBuilder();
		int cnt=0;
		
		string gSpecialFlags=editlistj["SpecialFlags"].CString().ToLower();
		string ShowAllParams=editlistj["ShowAllParams"].CString().ToLower();
		string UserEntersNewKey=editlistj["ShowAllParams"].CString().ToLower();
		foreach (iesJSON field in editlistj["EditFields"]) {
			dValue="";
			ShowField=true;
			dFieldName=Util.NoBracket(field["Field"].CString());
			sAlias=field["Alias"].CString().Trim();
			if (sAlias=="") { sAlias=dFieldName; }
			
			sFlags=field["Flags"].CString();
			sType=field["Type"].CString();
			sClass=field["Class"].CString();
			sWidth=field["Width"].CString();
			sHeight=field["Height"].CString();
			sNote=field["Note"].CString();

			autoFillInfo = field["Autofill"].jsonString;

			if (autoFillInfo == "null"){
			    autoFillInfo = "";
			}
			if (Util.Left(sType,5).ToLower()=="json_") {
				dValue=jRec[dFieldName].jsonString;
			} else {
				dValue=jRec[dFieldName].CString();
			}
			//if (sType.Trim().ToLower()=="json") { dValue=jRec[dFieldName].jsonString; }  // FUTURE: THIS DID NOT WORK
			if (create) {
				if (sFlags.IndexOf("p")>=0 && (UserEntersNewKey!="true")) { 
					ShowField=false;
					if (gSpecialFlags.IndexOf("shownew")>=0) { ShowField=true; }
				}
			}
			if ((ShowAllParams=="true") && jRec.Contains(dFieldName)) { jRec.RemoveFromBase(dFieldName); }
			//cms.Response.Write("DEBUG: Field=" + dFieldName + ", Flags=" + sFlags + ", Value=" + dValue);
			
			dFieldName="fld_" + dFieldName;  // Add fld_ prefix
			if (ShowField==true) { 	Content.Append(MakeEditRow(sAlias,dFieldName,sType,sClass,sFlags,sWidth,sHeight,dValue,sNote,cms,create,bViewOnly,HiddenFields,autoFillInfo)); }

			cnt++;
			if (cnt>99999) { break; }  //*** Safety
		} // End foreach
		
		// Display the remaining fields in jRec - if specified
		if (ShowAllParams=="true") {
			foreach (iesJSON field2 in jRec) {
				dValue="";
				if (!create) { dValue=field2.CString(); }
				Content.Append(MakeEditRow("fld_" + field2.Key,field2.Key,"text","","","160","",dValue,"",cms,create,bViewOnly,HiddenFields));
				cnt++;
				if (cnt>99999) { break; }  //*** Safety
			}
		}
	
		// FUTURE: Display second set of fields if high enough UserLevel
		// FUTURE: If SHOWALL then show remaining fields in jRec (as text box)
		Content.Append("</TABLE>" + HiddenFields.ToString());
		//Add Buttons to the form
		//if (!bViewOnly){
		//	Content.Append("<input type='button' name='Save2' value='Save' onclick='SaveItem(false);return false;'>");
		//}
		Content.Append("</form>");
	}
	
	public string MakeEditRow(string fAlias, string fID, string fType, string sClass, string fFlags, string fWidth, string fHeight, string fValue, string sNote, cmsInfo cms,bool IsNew, bool bViewOnly,StringBuilder HiddenFields, string AutoFillInfo = "") {
		string sRet="",bld="";
		bool Processed=false;
		bool meViewOnly=bViewOnly;
		bool meRequired=false;
		
		//Custom.MakeEditRow(ref fAlias,ref fID,ref fType,ref fFlags, ref fWidth, ref fValue, cms, ref meViewOnly, ref sRet, ref Processed);
		if (Processed) { return sRet; }
		
		string fTypeLower=fType.ToLower();
		string fFlagsLower=fFlags.ToLower();
		if (fFlagsLower.IndexOf("b")>=0) { bld=" class='bold' "; }
		if (fFlagsLower.IndexOf("r")>=0) { meRequired=true; } // Required field
		if (fFlagsLower.IndexOf("l")>=0) { meViewOnly=true; } // Lock field
		if (IsNew && (fFlagsLower.IndexOf("a")>=0)) { meViewOnly=false; } // UNlock field when ADDING a record
		string sNote2=sNote.Trim();
		if (sNote2!="") { sNote2="<span class='FieldNote'>" + sNote2 + "</span>"; }
		string mEditRow="<tr><td width=200 valign=top" + bld  + ">" + fAlias + ":</td><td>";
		string mEditRow2=sNote2 + "</td></tr>";
		
		if (Util.Left(fTypeLower,5)=="list-") {
			switch (Util.Mid(fTypeLower,5,999)) {
				case "status":
					// FUTURE: NEED TO MAKE THIS LIST DYNAMIC - AND SET VALUE BASED ON dValue
					/*
					sRet = "<select id='" + fID + "' name='"+ fID + "'";
					if (meViewOnly){ sRet += " disabled"; }					
					sRet += "><option value='Active' selected>Active</option><option value='Inactive'>Inactive</option><option value='Deleted'>Deleted</option></select>";
					*/
					iesJSON pListJson3=new iesJSON("[[\"Active\",\"Active\"],[\"Inactive\",\"Inactive\"],[\"Deleted\",\"Deleted\"]]");
					sRet=GenerateDD(pListJson3,fID,fWidth,fValue,meViewOnly,meRequired,sClass,true,"");
					break;
			}
			fTypeLower="list";
		}
		
		if (Util.Left(fTypeLower,6)=="plist-") {
			iesJSON pList=editlistj[fType];
			if ((pList.Status==0) && (pList.jsonType!="null")) {
				string pListType=pList["ListType"].CString();
				bool IncludeCurrent=true;
				if (pList.Contains("IncludeCurrent")) {
					if (pList["IncludeCurrent"].CString().ToLower()=="false") { IncludeCurrent=false; }
					}
				string AddNull=null;  
				if (pList.Contains("AddBlank")) {  // AddBlank is the old method - to be replaced by AddNull
					if (pList["AddBlank"].CString().ToLower()=="true") { AddNull=""; }
					}
				if (pList.Contains("AddNull")) {  // AddNull indicates a string/value to display in place of Null (for blank, set this to "")
					AddNull=pList["AddNull"].CString();
					}
				switch (pListType.ToLower()) {
					case "sql":
						iesJSON pListData=cms.db.GetDataReaderAll(pList["sql"].CString());
						if ((pListData.Status==0) && (pListData.jsonType!="null")) {
							sRet=GenerateDD(pListData,fID,fWidth,fValue,meViewOnly,meRequired,sClass,IncludeCurrent,AddNull);
							}
						break;
					case "json":
						iesJSON pListJson=pList["data"];
						if ((pListJson.Status==0) && (pListJson.jsonType!="null")) {
							sRet=GenerateDD(pListJson,fID,fWidth,fValue,meViewOnly,meRequired,sClass,IncludeCurrent,AddNull);
							}
							break;
					default:
						sRet="Invalid pList type encountered: " + pListType + ", " + pList + " [err1331]";
						break;
				}
			}
			fTypeLower="plist";
		}
		
		switch (fTypeLower) {
			case "text":
				sRet=mkTextBox(fID,fWidth,fValue,meViewOnly,meRequired,false,sClass);
				break;
			case "note":
			case "textarea":
				sRet=mkTextArea(fID,fWidth,fHeight,fValue,meViewOnly,meRequired,sClass);
				break;
			case "json_list":  // FUTURE: THIS DID NOT WORK
				sRet=mkTextBox(fID,fWidth,fValue,meViewOnly,meRequired,false,sClass,AutoFillInfo);
				break;		
			case "richtext":
				sRet=mkTextArea(fID,fWidth,fHeight,fValue,meViewOnly,meRequired,sClass + " richtext");
				// We also need this to be on one row...
				mEditRow="<tr><td colspan='2' width=200 valign=top" + bld  + ">" + fAlias + ":<br>";
				break;
			case "password":
				sRet=mkTextBox(fID,fWidth,"*******",meViewOnly,meRequired,false,sClass);
				break;
			case "hidden":
				sRet=mkHidden(fID,fWidth,fValue,meViewOnly,sClass);
				HiddenFields.Append(sRet);
				return ""; //Exit without creating a row
				break;
			case "date": 
				sRet=mkDateBox(fID,fWidth,fValue,meViewOnly,meRequired,true,sClass);
				break;
			case "datetime":
				sRet=mkDateBox(fID,fWidth,fValue,meViewOnly,meRequired,false,sClass);
				break;
			case "list":
			case "plist":
				break;  // No error - this was handled above.
			default:
				sRet="Invalid field type encountered: " + fType + " [err1321]";
				break;
		}
		
		return mEditRow + sRet + mEditRow2;
	}
	
	public static string mkDateBox(string fID,string nWidth,string fValue,bool bViewOnly,bool isRequired,bool isDateField=false,string cssClass="") {
    		string w="", fc="class='", d="";
    		string[] valueParts;
    		if (nWidth.Trim()!="") { w="width:" + nWidth + ";"; }
    		if (bViewOnly) { fc+=" locked"; d=" readonly ";}  // do not use 'disabled' because the field is excluded from the submit
    		if (isRequired) { fc+=" required"; }
    		if (isDateField){
    			if (!String.IsNullOrWhiteSpace(fValue)) {
    				valueParts = fValue.Split(' ');
    				fValue = valueParts[0];
    			}
    		}
    		fc += "'";
    		return "<input type='text' class='datepicker' id='" + fID + "' name='" + fID + "' value='" + fValue + "' style='float:left;margin-right:8px;" + w + "' " + d + fc + "><a href='#' class='cleardate' id='" + fID + "'>reset</a>";
    	}
		
	public static string mkTextBox(string fID,string nWidth,string fValue,bool bViewOnly,bool isRequired,bool isDateField=false,string cssClass="", string AutoFillInfo = "") {
		string w="", fc="class='", d="";
		StringBuilder returnString = new StringBuilder();
		string[] valueParts;
		fc+=cssClass;
		if (nWidth.Trim()!="") { w="width:" + nWidth + ";"; }
		if (bViewOnly) { fc+=" locked"; d=" readonly ";}  // do not use 'disabled' because the field is excluded from the submit
		if (isRequired) { fc+=" required"; }
		if (isDateField){
			if (!String.IsNullOrWhiteSpace(fValue)) { 
				valueParts = fValue.Split(' '); 
				fValue = valueParts[0];
			}
		}	
		fc += "'";
		returnString.Append("<input type='textbox' id='" + fID + "' name='" + fID + "' value='" + fValue + "' style='float:left;margin-right:8px;" + w + "' " + d + fc + ">");
		if (!String.IsNullOrWhiteSpace(AutoFillInfo)){
		    iesJSON autoFillDetails = new iesJSON();
		    try {
                autoFillDetails.Deserialize(AutoFillInfo);
                returnString.Append("<a ");
                foreach (iesJSON fillField in autoFillDetails){
                    returnString.Append(fillField.Key + " = '" + fillField.CString() + "' ");
                }
                returnString.Append("configname='" + fID + "' href='#' class='autofill'><span class='ui-icon ui-icon-circle-plus'></span></b>");
		    }catch(Exception e){
		        //Do nothing
		    }
        }
		return returnString.ToString();
	}
	
	public static string mkTextArea(string fID,string nWidth,string nHeight,string fValue,bool bViewOnly,bool isRequired,string cssClass="") {
		string w="", fc="class='", cssClasses = "", d="";
		if (!String.IsNullOrWhiteSpace(nWidth)) { w=w+"width:" + nWidth + ";"; }
		if (!String.IsNullOrWhiteSpace(nHeight)) { w=w+"height:" + nHeight + ";"; }
		if (!String.IsNullOrWhiteSpace(cssClass)){ fc += " " + cssClass;}
		if (bViewOnly) { fc+= " locked"; d=" disabled ";}
		if (isRequired) { fc+=" required"; }
		fc += "'";
		
		return "<textarea id='" + fID + "' name='" + fID + "' style='float:left;margin-right:8px;" + w + "' " + d + fc + ">" + fValue + "</textarea>";
	}
	
	public static string mkHidden(string fID,string nWidth,string fValue,bool bViewOnly,string sClass) {
		return "<input type='hidden' id='" + fID + "' name='" + fID + "' class='" + sClass + "' value='" + fValue + "'>";
	}
	
	public static string GenerateDD(iesJSON ddJson,string fID,string nWidth,string fValue,bool bViewOnly,bool isRequired,string sClass="",bool includeCurrent=true,string AddNull=null) {
		string fValLower=fValue.ToLower();
		StringBuilder oOpt=new StringBuilder();
		string oSelected="";
		foreach (iesJSON jRow in ddJson) {
			string jValue=jRow[0].CString();
			string jTitle=jRow[1].CString();
			//if ((jValue.ToLower()==fValLower) && (fValLower!="")) {  // If the dropdown contains a blank, then we need to match it here (if the fValue is also blank)
			if (jValue.ToLower()==fValLower) {
				oSelected="<option value='" + jValue + "' selected>" + jTitle + "</option>";
			}
			else {
				oOpt.Append("<option value='" + jValue + "'>" + jTitle + "</option>");
			}
		}
		if ((fValue!="") && (oSelected=="")) {
			// Selected value fValue was provided, but not found in the list.  Make a row so that the dropdown does not wipeout this value.
			// But ONLY IF includeCurrent==true
			if (includeCurrent) { oSelected="<option value='" + fValue + "' selected>" + fValue + "</option>"; }
		}
		string w="", fc="class='", blank="", d="";
		if (nWidth.Trim()!="") { w="width:" + nWidth + ";"; }
		if (bViewOnly) { fc+=" locked"; d=" disabled ";}
		if (isRequired) { fc+=" required"; }
		if (AddNull != null) { blank="<option value=''>" + AddNull + "</option>"; }
		fc += "'";
		string ret="<select id='" + fID + "' name='" + fID + "' style='float:left;margin-right:8px;" + w + "' " + d + fc + ">" + blank + oSelected + oOpt.ToString() + "</select>";
		return ret;
	}
	
	iesJSON CreateErrorJson(int ErrNum, string ErrMsg, string ErrStatus="ERROR") {
		iesJSON ret=new iesJSON("{}");
		ret["status"].Value=ErrStatus;
		ret["errmsg"].Value=ErrMsg;
		ret["errnum"].Value=ErrNum.ToString();
		return ret;
	}
	
	void SaveEditForm(StringBuilder Content) { 
		string retErr="";
		int retErrNum=0;
		iesJSON ret=null;
		LoadEditListIfNeeded();
		if ( editlistj == null ) { 
			retErrNum=6719;
			retErr="ERROR: Edit class not found. [err6719]";
			if (SITE.DebugMode>0) { retErr += " [" + cms.UrlParam("eclass") + "]"; }
			ret=CreateErrorJson(retErrNum,retErr);
			Content.Append(ret.jsonString);
			return; 
			}
		
		string table=editlistj["Table"].CString();
		string pk=editlistj["PrimaryKey"].CString();
		bool pknumeric=editlistj["PrimaryKeyNumeric"].ToBool();
		bool userenterspk=editlistj["UserEntersNewKey"].ToBool();
		string flags=editlistj["SpecialFlags"].CString().ToLower();
		
		// CHECK SECURITY LEVEL
		int Permit=EditFormSecurityLevel();  // Default=No Access
		bool bViewOnly=(Permit<=1) ? true : false;
		
		if (Permit<=0) {
			Content.Append("ERROR: Permission denied.");
			if (SITE.DebugMode>0) { Content.Append(" [UserLevel=" + cms.UserLevel.ToString() + "]"); }
			return;
			}
			
		iesJSON FormData;
		try {
			FormData=ReadEditParams(editlistj,ref retErr, ref retErrNum);
			// FUTURE: check for problems with FormData?  Null?  Error?
			// FUTURE: Call Custom function to allow custom edits of data prior to saving.
			if (retErr!="") { 
				retErr += "\n" + "ERROR: Form parameters invalid. [err1132]"; 
				ret=CreateErrorJson(retErrNum,retErr);
				Content.Append(ret.jsonString);
				return; }
			}
		catch (Exception e1) { 
			retErrNum=1133;
			retErr="ERROR: Read parameters failed. [err1133]";
			if (SITE.DebugMode>0) { retErr += "<br>" + e1.ToString(); }
			ret=CreateErrorJson(retErrNum,retErr);
			Content.Append(ret.jsonString);
			return; 
			}
		
		// Force record to use SITE.World - FUTURE: Allow admin to edit other World records?
		//Let's remove some pieces
		if (flags.IndexOf("noworldid")<0) { FormData["WorldID"].Value=SITE.World; }
		//Content.Append("DEBUG: Table=" + table + ", pk=" + pk + ", JSON=" + FormData.jsonString); return;  //DEBUG
	
		// Override values...
		iesJSON Override=editlistj["Override"];
		if (Override!=null) {
		  if (Override.Status==0 && Override.jsonType!="null") {
			foreach(iesJSON ovr in Override) {
				FormData.AddToObjBase(ovr.Key,ovr);
			} // end foreach
		  } // end if
		} // end if
		
		// If NOT(UserEntersNewKey) then check if this is a new record...
		int newrec=-1;  // check
		if (FormData[pk].CString()=="*new*" && userenterspk==false) { newrec=1; }
		
		// Fill in Lookup values
		if (retErr=="") {
			if (editlistj.Contains("Lookup")) { LookupFields(FormData,editlistj["Lookup"],ref retErr); }
		}
		
		// UniqueCheck
		if (retErr=="") {
			if (editlistj.Contains("UniqueCheck")) { UniqueCheck(FormData,editlistj["UniqueCheck"],newrec,pk,ref retErr); }
		}
		
		if (retErr=="") {
		try {
		/*
		//zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz DEBUG
		string tblColNames="";
		List<string> columnNames=new List<string>();
		string ret="";
		cms.db.Open();
		//ret = iesDBlib.iesDB.SaveRecordSQL(cms.db.iesConnection,FormData,table,pk,newrec,pknumeric,userenterspk,ref tblColNames,ref columnNames);
		ret=cms.db.SaveRecordSQL(FormData,table,pk.Split(','),newrec,pknumeric,userenterspk);
		cms.db.Close();
		Content.Append(ret + "+++" + FormData.jsonString);
		return;
		//zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz DEBUG
		*/
			cms.db.Open();

			//We need to get the original record first - FUTURE: Do we need this or can we always log current?
			iesJSON OldData = new iesJSON("{}");
			if (newrec == -1){
				string originalRecordSQL = "SELECT * FROM " + table + " WHERE " + pk + " = " + FormData[pk].CString() +  " LIMIT 1";
				OldData=cms.db.GetFirstRow(originalRecordSQL);		
			}
			
			if (!cms.db.SaveRecord(FormData,table,pk,newrec,pknumeric,userenterspk)) {
				// Was not successful...
				retErrNum=1144;
				retErr="ERROR: Save record failed. [err1144]<br>";
				if (SITE.DebugMode>0) { retErr += "<br>Status=" + cms.db.CmdStatus + ", Msg=" + cms.db.CmdStatusMessage; }
				ret=CreateErrorJson(retErrNum,retErr);
				Content.Append(ret.jsonString);
				return; 
				}
			else { // Successful save
				try {
					Custom.AfterSaveEvent(OldData,FormData,table,pk,newrec);
				} catch { } // FUTURE: Warn the user that the after processing failed?
				}
			}
		catch (Exception e2) { 
			Content.Append("ERROR: Save record failed. [err1134]<br>"); 
			if (SITE.DebugMode>0) { Content.Append("<br>" + e2.ToString());} 
			try { cms.db.Close(); } catch {}
			return; }
		}
		try { cms.db.Close(); } catch {}
		
		// Update AFTER
		if (retErr=="") {
			if (editlistj.Contains("UpdateAfter")) { UpdateAfter(FormData,editlistj["UpdateAfter"],ref retErr); }
		}
		
		//Content.Append(FormData.jsonString);
		if (retErr=="") {
			Content.Append("success:"+ pk + ":"+FormData[pk].Value);
		} else {
			Content.Append("ERROR: " + retErr);
			}
	}
	
	void GenerateEditConfig(StringBuilder Content) { 
		// Get URL Parameters
		string urlClass="eclass-edit-" + cms.UrlParam("class");
		string urlFile=cms.UrlParam("file");
		string urlFile2=SITE.ConfigFolder + "\\" + urlFile;
		if (Util.Right(urlFile2,4).ToLower() != ".cfg") { urlFile2+=".cfg"; }
		
		// Load CLASS JSON
		iesJSON editClass=LoadJsonConfig(urlClass,true);
		
		// Check permissions
		int EditSecLevel=editClass["EditSecLevel"].ToInt(999);
		if (cms.UserLevel<EditSecLevel) {
			Content.Append("<br><br><b>Invalid permissions.</b> [" + cms.UserLevel + "," + EditSecLevel + "] [err4444]<br><br><br>");
			return;
			}
			
		// Load Config File (as one large block of text)
		string configData="";
		if (!System.IO.File.Exists(urlFile2)) {
			Content.Append("<br><br><b>File not found [err4447]:</b> " + urlFile2 + " <br><br><br>");
			return;
			}
		Util.ReadFile(urlFile2, ref configData);
		if (configData=="") {
			Content.Append("<br><br><b>No config data [err4448]:</b> " + urlFile2 + " <br><br><br>");
			return;
			}
			
		// Make Page Header
		Content.Append("<HTML><BODY>\n");
		Content.Append("<h2>Admin Edit Config: " + urlFile + "</h1>\n");

		// Make Page Edit Area
		Content.Append("<input type='button' id='Save' value='Save' onClick='btnSave(false);' /> &nbsp; <input type='button' id='SaveClose' value='Save/Close' onClick='btnSave(true);' /> &nbsp; <input type='button' id='Close' value='Cancel/Close' onClick='btnClose();' /><br>\n");
		Content.Append("<div id='EditArea' style='background:#FFFFFF;'></div>\n");
		Content.Append("</BODY></HTML>\n");
		
		// NOTE: In order to send [[ symbols to the web page, the configData needs to have [[+ each place there is a [[
		configData=configData.Replace("[[","[[+");
		
		// Append Class/Config
		editClass.UseFlexJson=false;
		editClass.InvalidateJsonString();
		Content.Append("<script>\n\n");
		Content.Append("var editClass='" + urlClass + "';\n");
		Content.Append("var editFile='" + urlFile + "';\n\n");
		Content.Append("var cfgClass=" + editClass.jsonString + ";\n\n");
		Content.Append("var cfgData=\"" + editClass.EncodeString(configData) + "\";\n\n");
		Content.Append("<" + "/" + "script>\n");
	}
	
	
	void SaveConfig(StringBuilder Content) { 
		// Get URL Parameters
		string urlClass=cms.UrlParam("class");
		string urlFile=cms.UrlParam("file");
		string urlFile2=SITE.ConfigFolder + "\\" + urlFile;
		string configData=cms.FormParam("cfgData");
		
		if (Util.Right(urlFile2,4).ToLower() != ".cfg") { urlFile2+=".cfg"; }
		
		// Load CLASS JSON
		iesJSON editClass=LoadJsonConfig(urlClass,true);
		
		// Check permissions
		int EditSecLevel=editClass["EditSecLevel"].ToInt(999);
		if (cms.UserLevel<EditSecLevel) {
			Content.Append("ERROR: Invalid permissions.</b> [" + cms.UserLevel + "," + EditSecLevel + "] [err5555]");
			return;
			}
		
		// Save Config File (as one large block of text) - overwrite if already exists (which it should)
		// FUTURE: Create a backup of the previous config file first!
		try {
			bool writeSuccess=Util.WriteFile(urlFile2,ref configData,true);
			if (writeSuccess==true) {
				Content.Append("success");
			} else {
				Content.Append("ERROR: Failed to save config data. [err3901]");
			}
			return;
		} catch { }
		Content.Append("ERROR: Failed to save config data. [err3902]");
	}
	
	void GenerateEditRecord(StringBuilder Content) { // FUTURE: Why are we using this and not admin-editlist-form?
		// Get URL Parameters
		string urlClass="eclass-edit-" + cms.UrlParam("class");
		string urlKey=cms.UrlParam("key");
		string urlFile2="";
		string urlFile="";
		
		// Load CLASS JSON
		iesJSON editClass=LoadJsonConfig(urlClass,true);
		
		// Check permissions
		int EditSecLevel=editClass["EditSecLevel"].ToInt(999);
		if (cms.UserLevel<EditSecLevel) {
			Content.Append("<br><br><b>Invalid permissions.</b> [" + cms.UserLevel + "," + EditSecLevel + "] [err4444]<br><br><br>");
			return;
			}
			
		// Build the data form...
		iesJSON fields=editClass["EditFields"];
		
		string getSQL="SELECT * FROM ";
		if (!System.IO.File.Exists(urlFile2)) {
			Content.Append("<br><br><b>File not found [err4447]:</b> " + urlFile2 + " <br><br><br>");
			return;
			}
			/*
		Util.ReadFile(urlFile2, ref configData);
		if (configData=="") {
			Content.Append("<br><br><b>No config data [err4448]:</b> " + urlFile2 + " <br><br><br>");
			return;
			}
			*/
			
		// Make Page Header
		Content.Append("<HTML><BODY>\n");
		Content.Append("<h2>Admin Edit Config: " + urlFile + "</h1>\n");

		// Make Page Edit Area
		Content.Append("<input type='button' id='Save' value='Save' onClick='btnSave(false);' /> &nbsp; <input type='button' id='SaveClose' value='Save/Close' onClick='btnSave(true);' /> &nbsp; <input type='button' id='Close' value='Cancel/Close' onClick='btnClose();' /><br>\n");
		Content.Append("<div id='EditArea' style='background:#FFFFFF;'></div>\n");
		Content.Append("</BODY></HTML>\n");
		
		// NOTE: In order to send [[ symbols to the web page, the configData needs to have [[+ each place there is a [[
		//configData=configData.Replace("[[","[[+");
		
		// Append Class/Config
		editClass.UseFlexJson=false;
		editClass.InvalidateJsonString();
		Content.Append("<script>\n\n");
		Content.Append("var editClass='" + urlClass + "';\n");
		Content.Append("var editFile='" + urlFile + "';\n\n");
		Content.Append("var cfgClass=" + editClass.jsonString + ";\n\n");
		//Content.Append("var cfgData=\"" + editClass.EncodeString(configData) + "\";\n\n");
		Content.Append("<" + "/" + "script>\n");
	}
	
	void LookupFields(iesJSON FormData, iesJSON Lookups, ref string retErr) {
		string sql="";
		foreach (iesJSON Lookup in Lookups) {
		  string sSelect=Lookup["select"].CString();
		  iesJSON flds=Lookup["fields"];
		  // build query
		  try {
		  sql=Util.ReplaceTags(sSelect,FormData,true,"[[","]]");
		  iesJSON rec=cms.db.GetFirstRow(sql);
		  //rec=rec[0];  // Get first row (if none, then rec will = null)  // NO LONGER NEEDED - CHANGE TO LIBRARY - TKT 5/13/2016
		  if (rec.jsonType=="object") {
			// Found lookup row
			foreach (iesJSON fld in flds) {
				string v=fld.CString();
				if (v.IndexOf("[[")<0) {
					v=rec[v].CString();
				} else {
					v=Util.ReplaceTags(v,rec,true,"[[","]]");
				}
				FormData[fld.Key].Value=v;
			}
		  } else {
			retErr="ERROR: Failed to perform Lookup [err4919] (" + sql + ")";
			}
		} catch (Exception e12) { 
				retErr="ERROR: Lookup query failed. [err4917]";
				if (SITE.DebugMode>0) { retErr=retErr + " (" + sql + ") " + e12.ToString(); }
				}
		}
	}
	
	void UpdateAfter(iesJSON FormData, iesJSON UpdateList, ref string retErr) {
		string sql="";
		foreach (iesJSON updRec in UpdateList) {
		  string sPreSQL=updRec["sql"].CString();
		  
		  // build query
		  try {
			sql=Util.ReplaceTags(sPreSQL,FormData,true,"[[","]]");
			cms.db.ExecuteSQL(sql);
		  } catch (Exception e18) { 
				retErr="ERROR: UpdateAfter script failed. [err4933]";
				if (SITE.DebugMode>0) { retErr=retErr + " (" + sql + ") " + e18.ToString(); }
				}
		}
	}
	
	void UniqueCheck(iesJSON FormData, iesJSON Unique, int newrec, string pk, ref string retErr) {
		string w="";
		int k=0;
		//string pk=editlistj["PrimaryKey"].CString();
		string tbl=editlistj["Table"].CString();
		foreach (iesJSON Fld in Unique) {
			string sFld=Fld.CString();
			if (k>0) { w=w + " AND "; }
			w=w + " " + sFld + "=" + iesDBlib.iesDB.dbStr(FormData[sFld].CString());
			k++;
		}
		string sWhere=editlistj["WHERE"].CString().Trim();
		if (sWhere!="") { sWhere=" AND " + sWhere; }
		if (newrec==1) {
			w="WHERE " + w + sWhere;
		} else {
			w="WHERE " + pk + " != " + iesDBlib.iesDB.dbStr(FormData[pk].CString()) + " AND " + w + sWhere; 
		}
		int rCount=cms.db.GetCount(tbl,w);
		if (rCount>0) { retErr="Unique check failed. [err4199]"; }
		if (rCount<0) { retErr="Failed too execute unique check. [err4198]"; }
	}
	
	iesJSON ReadEditParams(iesJSON editclass,ref string retErr,ref int retErrNum) {
		iesJSON Bucket=new iesJSON("{}");
		bool ReadAllParams=false;
		if (editclass["ShowAllParams"].CString().Trim().ToLower()=="true") {ReadAllParams=true;}
		iesJSON pkField = new iesJSON("{}");
		pkField.AddToObjBase("Field",editclass["PrimaryKey"]);
		pkField.AddToObjBase("Type","text");
		pkField.AddToObjBase("Width",60);
		pkField.AddToObjBase("Height",null);
		pkField.AddToObjBase("Flags","b");
		pkField.AddToObjBase("Alias",editclass["PrimaryKey"]);
		pkField.AddToObjBase("FieldType",null);
	
		iesJSON AdjustedField = editclass["EditFields"];
		AdjustedField.AddToArrayBase(pkField);
		
		retErr=ReadEditParamsInto(AdjustedField,editclass["EditFields2"],Bucket,ReadAllParams);
		if (retErr!="") { retErrNum=7979; } // err7979 - indicates a collection of errors from ReadEditParamsInto()
		return Bucket;
	}
	
	string ReadEditParamsInto(iesJSON FieldList1, iesJSON FieldList2, iesJSON Bucket, bool ReadAllParams) {
	
		iesJSON AlreadyProcessed=new iesJSON("{}");
		string dbField, dbField2, dbAlias, sFlags, zFld;
		string sFldName, sFldValue, sFieldType;
		StringBuilder ret=new StringBuilder();
		// FUTURE: Error Trapping?

		// *** GET SPECIFIED FIELDS...
		foreach (iesJSON iField in FieldList1) {
			dbField=Util.NoBracket(iField["Field"].CString()).Trim();
			dbAlias=iField["Alias"].CString().Trim();
			if (dbAlias=="") { dbAlias=dbField; }
			dbField2=dbField.Trim().ToLower();
			sFldName="fld_" + dbField;
			
			sFlags=iField["Flags"].CString();
			sFieldType=iField["Type"].CString().Trim().ToLower();
			
			//if (sFieldType=="richtext" || sFieldType=="richtext2") { sFldName="rt_fld" + dbField; }  // Lets base the RichText on a class instead.
			try {
				sFldValue=cms.Request.Form[sFldName].ToString(); // CleanFieldHtml(cms.Request.Form[sFldName].ToString());
				}
			catch (Exception e3) {
				sFldValue="";
				ret.Append("Field not found. [" + sFldName + "]\n");
				}
				
			if (sFlags.IndexOf("t")>=0) { sFldValue=sFldValue.Trim(); }
			if (sFlags.IndexOf("r")>=0) { // Required Field
				if (String.IsNullOrWhiteSpace(sFldValue)) {ret.Append("Required field missing: " + dbAlias + "\n");} 
				}
			
			// FUTURE: Do we need to do something if this is a NEW items and the user did not enter a Primary Key value?
			//    or do something if they must enter a primary key and did not?
			
			// *** USER CANNOT SET THE USER LEVEL TO A VALUE HIGHER THAN THEIR USER LEVEL!
			if (dbField2=="level") {
				int lvl=0;
				lvl=Util.ToInt(sFldValue);
				if (lvl.ToString()!=sFldValue) { lvl=0; } // SAFETY!  FUTURE: Also need to flag an error here!
				if (lvl<=cms.UserLevel) { Bucket.AddToObjBase(dbField,lvl); }
						  
				} // if (dbField2=="level")
			else {
				bool fldOK=false, isJson=false, isJsonString=false;
				string jsonObjName="", jsonParam="";
				int ptr=0;
				ptr=dbField2.IndexOf(".");
				if (ptr>0) {
					// Field within JSON parameter - make sure parameter is set as JSON
					isJson=true;
					jsonObjName=Util.Left(dbField2,ptr);
					jsonParam=Util.Mid(dbField2,ptr+1);
					iesJSON jCheck=Bucket[jsonObjName];
					if (jCheck.jsonType.ToLower()!="object") { 
						// Create an empty Object to collect the JSON values
						Bucket.AddToObjBase(jsonObjName,iesJSON.CreateEmptyObject()); 
					}
				}
				string v="";
				switch (sFieldType) {
					case "password":
						// *** PASSWORDS MUST BE AT LEAST 3 CHARACTERS AND CANNOT BE ALL "*" SYMBOLS
						if ((sFldValue.Length >= 3) && (sFldValue.Replace("*","")!="")) { v=sFldValue; fldOK=true; }
						break;
					case "date":
						v=ValidateDateField(sFldValue);
						if (v=="" && sFldValue!="") { break; }  // FUTURE: We need to flag this as an error!
						else { fldOK=true; }
						break;
					case "datetime":
						v=ValidateDateTimeField(sFldValue);
						if (v=="" && sFldValue!="") { break; }  // FUTURE: We need to flag this as an error!
						else { fldOK=true; }
						break;
					case "richtext":
						//Util.LogToFile(HttpUtility.HtmlDecode(sFldValue),"DEBUG-HtmlDecode"); //DEBUG
						v=HttpUtility.HtmlDecode(sFldValue);
						Util.ReplaceUnicode(true,ref v); // Replace things such as left-single-quote with HTML equivalent
						fldOK=true;
						//Bucket.AddToObjBase(dbField,HttpUtility.HtmlDecode(sFldValue));
						//Util.LogToFile(Bucket.jsonString,"DEBUG-json"); //DEBUG
						break;
					case "json_list":
						v=sFldValue;
						fldOK=true;
						isJsonString=true;
						break;
					default:
						v=sFldValue;
						fldOK=true;
						break;
					} // switch
					if (fldOK) { 
					 if (!isJson) {
					  Bucket.AddToObjBase(dbField,v); 
					 } else {
					  if (!isJsonString) {
						//zzz=zzz+"(" + dbField2 + "~" + v + ")";
						Bucket[dbField2].Value=v;
					  } else {
						Bucket[dbField2]=new iesJSON(v);
					  }
					 }
					}
				} // else

			if (ReadAllParams) { AlreadyProcessed.AddToObjBase(dbField,""); }

		} // foreach

// *** FUTURE: Process zFields2

if (ReadAllParams) {

  // *** GET ALL FIELDS...
  foreach (string dbFld in cms.Request.Form) {
		dbField2=dbFld.Trim().ToLower();
		if (!AlreadyProcessed.Contains(dbFld) && Util.Left(dbField2,4)=="fld_" ) {  // Only process if not already processed above AND if field name begins with "fld"
      		// *** We do NOT DISPLAY Params/rParams/_json as a field!  (Params becomes broken out into separate fields)
			if (dbField2!="params" && dbField2!="rparams" && dbField2!="_json") {
				sFldName=dbFld.Substring(4);
				sFldValue=cms.Request.Form[dbFld].ToString(); // CleanFieldHtml(Request.Form(dbFld).ToString());

				Bucket.AddToObjBase(dbFld,sFldValue);
			} // if (dbField2!="params" && dbField2!="rparams" && dbField2!="_json")
		} // if (!AlreadyProcessed.Contains(dbFld))
  } // foreach
} // if (ReadAllParams)

/* FUTURE: 

   '*** If AddDelFields exists - we must process the AddDel feature
   '*** It contains a comma separated list of fields to add (or delete)
   '*** Fields preceeded by a minus sign will be DELETED instead of added.
   'Dim sAddDel as String, aAddDel as Object, nAddDel as Object, sOneFld as String

   sAddDel=Request.Form("AddDelFields") & ""

   Err.Clear
   If sAddDel<>"" Then
	aAddDel=Split(sAddDel,",")
	For Each nAddDel in aAddDel
	  sOneFld=Trim(nAddDel & "")
	  If Left(sOneFld,1)="-" Then
		'*** DELETE FIELD
		sOneFld=Trim(Mid(sOneFld,2))
		If sOneFld<>"" Then 

			zwObj.baselist.Remove(sOneFld)
			Err.Clear

		End If
	  Else
	    If Left(sOneFld,1)="+" Then sOneFld=Trim(Mid(sOneFld,2))  '*** Just incase there is a + symbol
	    '*** Add Field
	    If sOneFld<>"" and Not(zwObj.baselist.ContainsKey(sOneFld)) Then zwObj.Param(sOneFld)=""
	  End If
	Next
   End If
   
*/
	return ret.ToString();
	
	} // end function
	
	/* FUTURE: Is this not needed?!?!
string CleanFieldHtml(ref string sStr) {
	StringBuilder newStr=new StringBuilder(sStr);
	Dim sMatch as Object, k as Integer, safety as Integer, iPtr as Integer
	sMatch=SPLIT("&ldquo;|""|&rdquo;|""|&lsquo;|'|&rsquo;|'","|")
	safety=99999
	For k=0 To sMatch.Length-1 Step 2
		Do While true=true
			iPtr=newStr.ToString().IndexOf(sMatch(k), 0, StringComparison.CurrentCultureIgnoreCase)
			If iPtr<0 Then Exit Do
			newStr.Remove(iPtr,sMatch(k).Length)
			newStr.Insert(iPtr,sMatch(k+1))
			safety=safety-1
			If safety<0 Then Exit Do
		Loop
		safety=safety-1
		If safety<0 Then Exit For
	Next
	return newStr.ToString();
} // end function
*/

	
	string ValidateDateField(string sVal) {
	try {
		DateTime d=DateTime.Parse(sVal);
		string ret=d.ToString("yyyy-MM-dd");
		return ret;
		}
		catch (Exception e) { return ""; }
	}
	
	string ValidateDateTimeField(string sVal) {
	try {
		DateTime d=DateTime.Parse(sVal);
		string ret=d.ToString("yyyy-MM-dd HH:mm:ss");
		return ret;
		}
		catch (Exception e) { return ""; }
	}

	int EditFormSecurityLevel() {
		int Permit=0;  //Default=No Access
		int ViewSecLevel=editlistj["ViewSecLevel"].ToInt(99);
		int EditSecLevel=editlistj["EditSecLevel"].ToInt(99);
		int AdminSecLevel=editlistj["AdminSecLevel"].ToInt(99);
		// FUTURE: If flag OwnerCanEdit, then check the owner of the object and if that is this user, allow edit.
		if (cms.UserLevel>=ViewSecLevel) { Permit=1; }   //Allow VIEW ONLY Mode
		if (cms.UserLevel>=EditSecLevel) { Permit=3; }   //Allow Edit Mode
		if (cms.UserLevel>=AdminSecLevel) { Permit=7; }  //Allow Admin Mode
		return Permit;
	}
	
	// UnpakParamPak - TEMPORARY ROUTINE - used to unpack the old wObject format and put it into the new JSON format
	public static void UnpakParamPak(iesJSON jRec) {
		if (jRec["StorFormat"].CString().ToLower()!="parampak") { return; } // Only unpak "ParamPak" records
		string Params=jRec["Params"].CString();
//		if (Params!="") {
//		}
		jRec.RemoveFromBase("Params");
		jRec.RemoveFromBase("rParams");
		jRec["StorFormat"].Value="json";
	}
	
} // End Class cmsAdmin

public static class Util {

	// ******************************************** Utilities ************************************************

public static string MakeSearch(string oFields, string oSearch, cmsInfo cms, bool mysqlDate = false) {
		SortedList FieldList, SearchList, DatePiece;
		int p1cnt, p2cnt;
		StringBuilder qry=new StringBuilder();
		FieldList=SplitStr(oFields,",");
		SearchList=SplitStr(oSearch, ", *%");
		// **** Search Criteria
		if (SearchList.Count > 0) {
			p1cnt=0;
			if (qry.Length>0) { qry.Append(") AND ("); }
			foreach (string p1b in SearchList.Values) {
				string p1 = p1b;
				if (mysqlDate) {
					DatePiece = SplitStr(p1,"/");
					string strMonth="";
					string strDay="";
					if((DatePiece.Count >= 2) && (DatePiece.Count <= 3)) {
						strDay=DatePiece[2].ToString().Trim();
						if(strDay.Length==1){ strDay= "0" + strDay; }
						strMonth=DatePiece[1].ToString().Trim();
						if(strMonth.Length==1) { strMonth="0" + strMonth; }
						p1 = strMonth + "-" + strDay;
					}
					if(DatePiece.Count == 3) {
						p1 = DatePiece[3] + "-" + p1;
					}
				}
				if (p1cnt>0) { qry.Append(") AND ("); }
				else { qry.Append("("); }
				p1cnt=p1cnt + 1;
				// *** Fields....
				p2cnt=0;
				foreach (string p2 in FieldList.Values) {
					if (p2cnt>0) { qry.Append(" OR "); }
					p2cnt = p2cnt + 1;
					qry.Append(p2 + " LIKE '%" + p1.Replace("'","''") + "%'");
				} // End foreach (p2 in FieldList)
			} // End foreach (p1 in SearchList)
			qry.Append(")");
			} // End if (SearchList.Length > 0)
		return qry.ToString();
	} // End Function
	
	// *** SplitStr()
	// *** NOTE: NEEDED BECAUSE WE SPLIT BASED ON MORE THAN 1 CHARACTER
	public static SortedList SplitStr(string nString, string CharList) {
	  int cnt, LastF, ListLen, px, f, s, safety;
	  string newStr="";
	  SortedList ret;
	  
	  ret = new SortedList(new CaseInsensitiveComparer());
	  cnt=0;
	  safety=9999;
	  LastF=0;
	  ListLen=CharList.Length;
	  if (nString.Length<=0) { return ret; }
	  do {
	    f=999999;
	    for (px=0;px<ListLen;px++) {		
	      s=nString.IndexOf(CharList.Substring(px,1),LastF);
	      if ((s>0) && (s<f)) { f=s; } 
	      } // End for
	    if (f>=999999) { break; }
	    newStr = nString.Substring(LastF,f-LastF);
	    if (newStr.Trim()!="") {
	      cnt=cnt+1;  
	      ret.Add(cnt, newStr);
		  }
	    LastF=f+1;
		if (safety--<=0) { break; }
	  } while (true);
	  if (LastF<nString.Length) { newStr = nString.Substring(LastF,(nString.Length)-LastF); }
	  if (newStr.Trim()!="") {
	    cnt=cnt+1;
	    ret.Add(cnt, newStr);
		}
	  return ret;
	} //End Function
	
	// *** Split()
	// *** SPLIT BASED ON MORE THAN 1 CHARACTER
	// *** Note: The above routine returns a SortedList (Dictionary object)... not sure why	
	public static string[] Split(string nString, string CharList) {
	  int cnt, LastF, ListLen, px, f, s, safety;
	  string newStr="";
	  List<string> ret = new List<string>();
	  
	  cnt=0;
	  safety=9999;
	  LastF=0;
	  ListLen=CharList.Length;
	  if (nString.Length<=0) { return ret.ToArray(); }
	  do {
	    f=999999;
	    for (px=0;px<ListLen;px++) {		
	      s=nString.IndexOf(CharList.Substring(px,1),LastF);
	      if ((s>0) && (s<f)) { f=s; } 
	      } // End for
	    if (f>=999999) { break; }
	    newStr = nString.Substring(LastF,f-LastF);
	    if (newStr.Trim()!="") {
	      cnt=cnt+1;  
	      ret.Add(newStr);
		  }
	    LastF=f+1;
		if (safety--<=0) { break; }
	  } while (true);
	  if (LastF<nString.Length) { newStr = nString.Substring(LastF,(nString.Length)-LastF); }
	  if (newStr.Trim()!="") {
	    cnt=cnt+1;
	    ret.Add(newStr);
		}
	  return ret.ToArray();
	} //End Function
	
  // ************************************************************************************************************
  // **************** ReplaceTags()
  // **************** Replaces [[Tags]] with values from a iesJSON object.
  // **************** If a [[Tag]] is not found in tagValues then...
  // ****************   If SetNoMatchBlank=true Then the tag is replaced with ""
  // ****************   If SetNoMatchBlank=false Then the tag is left in the string.
  // ****************
  public static string ReplaceTags(string inputString, iesJSON tagValues, bool SetNoMatchBlank=true, string startStr="[[", string endStr="]]", int lvl=0)  {
	int charPosition = 0;
	int beginning = 0;
	int startPos = 0;
	int endPos = 0;
	StringBuilder data = new StringBuilder();

	// Safety - keep from causing an infinite loop.
	if (lvl++>99) { return inputString; }
  
	do {
		// Let's look for our tags to replace
		charPosition = inputString.IndexOf(startStr, endPos);
		if (charPosition >= 0) {
			startPos = charPosition;
			endPos = inputString.IndexOf(endStr, startPos);
			if (endPos<0) {
				// We did not find a matching end ]].  Break out of loop.
				charPosition=-2;
				}
			else {
				// We found a match...
				string tag = inputString.Substring(startPos + startStr.Length, (endPos - startPos) - endStr.Length);

				string replacement = "";
				// Check to see if tagValues contains a value for this field.
				if (tagValues.Contains(tag)) {
					// Yes it does.
					replacement = tagValues[tag].CString();
					
					// Check if our replacement string has [[tags]] that need to be replaced
					int pt=replacement.IndexOf(startStr);
					if (pt>=0) {
						// Recursive call to replace [[tags]]
						string replace2=ReplaceTags(replacement,tagValues,SetNoMatchBlank,startStr,endStr,lvl);
						replacement=replace2;
						}
					}
				else {
					// No it does not contain tag
					if (SetNoMatchBlank == false) { replacement = startStr + tag + endStr; }
					}

				data.Append(inputString.Substring(beginning, (startPos - beginning)));
				data.Append(replacement);
				beginning = endPos + endStr.Length;
				}  // End if (endPos<0) else
			  }  // End if (charPosition >= 0)
			} while (charPosition >= 0);

		if (beginning < (inputString.Length)) {
            data.Append(inputString.Substring(beginning));
			}

        return data.ToString();
    }
	
	// **********************************************************************
	// ****** SendEmail
	// ****** 
	// **********************************************************************
	public static iesJSON SendEmail(iesJSON emailConfig, string toEmailP="", string fromEmailP="", string ccEmailP="", 
			string bccEmailP="", string emailSubjectP="", string emailBodyP="") {
		string pattern = null;
		string toEmail=toEmailP.Trim();
		string fromEmail=fromEmailP.Trim();
		string ccEmail=ccEmailP.Trim();
		string bccEmail=bccEmailP.Trim();
		string emailSubject=emailSubjectP.Trim();
		string emailBody=emailBodyP.Trim();
		
		if (toEmail=="") { toEmail=emailConfig["SendTo"].CString(); }  // FUTURE: Also allow for a json list
		if (fromEmail=="") { fromEmail=emailConfig["SendFrom"].CString(); }  // FUTURE: Also allow for a json list
		if (ccEmail=="") { ccEmail=emailConfig["cc"].CString(); }  // FUTURE: Also allow for a json list 
		if (bccEmail=="") { bccEmail=emailConfig["bcc"].CString(); }  // FUTURE: Also allow for a json list 
		if (emailSubject=="") { emailSubject=emailConfig["Subject"].CString(); } 
		if (emailBody=="") { emailBody=emailConfig["emailBody"].CString(); }  
		
		iesJSON emailResults = new iesJSON("{}");
		emailResults["success"].Value = false;
		emailResults["response"].Value = "";		
		var toEmailList = toEmail.Replace(";",",").Split(','); // FUTURE: Also allow for a json list
		
		if (toEmailList.Length < 1){
			emailResults["response"].Value = "Blank TO Email Address";
			return emailResults;
		}
		
		if (String.IsNullOrWhiteSpace(fromEmail)){
			emailResults["response"].Value = "Blank FROM Email Address";
			return emailResults;
		}

		//Check for subject and body
		if (String.IsNullOrWhiteSpace(emailSubject)){
			emailResults["response"].Value = "Blank Email Subject Email Address";
			return emailResults;
		}
		
		if (String.IsNullOrWhiteSpace(emailBody)){
			emailResults["response"].Value = "Blank Email Body Email Address";
			return emailResults;
		}		
		
		//Check that each of the email addresses is valid
		pattern = "^([0-9a-zA-Z]([-\\.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$";
		if (!Regex.IsMatch(fromEmail,pattern)){
			emailResults["response"].Value = "Invalid From Address";
			return emailResults;
		}
		
		//Check all the TO Email Addresses
		iesJSON errorToEmail = new iesJSON("[]");
		int toctr = 0;
		foreach (string singleToEmail in toEmailList){
			if (!Regex.IsMatch(singleToEmail,pattern)){
				errorToEmail[toctr].Value = singleToEmail + " is an invalid email address";				
			}
			toctr++;
		}		
		
		if (errorToEmail.Length > 0){
			emailResults["response"] = errorToEmail;
			return emailResults;
		}
		
		//Check the CC Email Addresses, we care less about these so just exclude the incorrect ones
		iesJSON cleanCCEmail = new iesJSON("{}");
		if (ccEmail.Length > 0){
			foreach (string singleCCEmail in ccEmail.Replace(";",",").Split(',')){
				if (Regex.IsMatch(singleCCEmail,pattern)){
					cleanCCEmail[singleCCEmail].Value = singleCCEmail; // Future: use iesJSON Array instead of Object?
				}
			}		
		}


		//Check the BCC Email Addresses, we care less about these so just exclude the incorrect ones
		iesJSON cleanBCCEmail = new iesJSON("{}");
		if (bccEmail.Length > 0){
			foreach (string singleBCCEmail in bccEmail.Replace(";",",").Split(',')){
				if (Regex.IsMatch(singleBCCEmail,pattern)){
					cleanBCCEmail[singleBCCEmail].Value = singleBCCEmail; // Future: use iesJSON Array instead of Object?
				}
			}		
		}		
		
		//Now we send the email		
		System.Net.Mail.SmtpClient smtpClient = new System.Net.Mail.SmtpClient(SITE.email_smtp_server);
		if (SITE.email_smtp_port>=0) { smtpClient.Port = SITE.email_smtp_port; }
		smtpClient.UseDefaultCredentials = false; //This has to come before the credentials line below
		smtpClient.Credentials = new System.Net.NetworkCredential(SITE.email_login, SITE.email_pwd);
		smtpClient.EnableSsl = SITE.email_smtp_ssl;
		
		System.Net.Mail.MailMessage mail = new System.Net.Mail.MailMessage();
		//Setting From , To and CC
		mail.From = new System.Net.Mail.MailAddress(fromEmail, SITE.World);
		
		//Add out TO Email Addresses
		foreach (string singleToEmail in toEmailList){
			mail.To.Add(new System.Net.Mail.MailAddress(singleToEmail));
		}	
		
		//Add any cc emails if they exist
		if (cleanCCEmail.Length > 0){
			foreach (iesJSON singleCCEmail in cleanCCEmail){
				mail.CC.Add(new System.Net.Mail.MailAddress(singleCCEmail.CString()));
			}		
		}
		
		mail.Subject = emailSubject;
		mail.SubjectEncoding = System.Text.Encoding.UTF8;
		mail.Body = emailBody;
		mail.BodyEncoding = System.Text.Encoding.UTF8;
		mail.IsBodyHtml = true;
		mail.Priority = System.Net.Mail.MailPriority.High;		
		try {
			smtpClient.Send(mail);	
			emailResults["success"].Value = true;
		}
		catch (Exception ex){
			emailResults["response"].Value = ex.ToString();
		}
		
		return emailResults;
	}
	
	
	// *** ReadFile()
    // *** Read the entire text file specified by sFileName into ReadIntoVar
    // *** sFileName should include the full path
    public static void ReadFile(string sFileName, ref string ReadIntoVar) {
		StreamReader wFile;
		string ret="";  // Default incase the following fails.

		try {
			// *** FUTURE: Provide error trapping/handling and display error messages for developers

			wFile=new StreamReader(sFileName);
			ret=wFile.ReadToEnd();
			wFile.Close();
			}
		catch { }
		ReadIntoVar=ret;
    } // End Function
	
	// *** WriteFile()
    // *** Write entire text file specified by sFileName
    // *** sFileName should include the full path
    public static bool WriteFile(string sFileName, ref string DataToWrite, bool DeleteFirst=true) {
		StreamWriter wFile;
		bool ret=false;  // Default incase the following fails. (failed)
		
		try {
			if (DeleteFirst==true) {
				if (System.IO.File.Exists(sFileName)) {
					System.IO.File.Delete(sFileName);
				}
			}

			wFile=new StreamWriter(sFileName);
			wFile.Write(DataToWrite);
			wFile.Close();
			ret=true; // success
		}
		catch { }
		return ret;
    } // End method
	
	public static void ReadFileFrom(string sFileName, string[] Folders, ref string ReadIntoVar) {
		string sPath;
		foreach (string strFolder in Folders) {
			sPath=strFolder + "\\" + sFileName;
			if (File.Exists(sPath)) {
				ReadFile(sPath,ref ReadIntoVar);
				break;
				}
		} // End foreach
	}
	
	/*** LogToFile() - For a quick log or debug message...
	**** If sFileName does not contain a "." (ie. no extension such as .txt) then we add .txt
	**** If sFileName does not contain a "\" (ie. no path) then we add the path to the log folder
	**** If sFileName is blank, we create a LOG file with the current datetime
	**** If fAddDateTime==true then we assume this is a file name without an extension and we append a date/time stamp.
	**** A typical call might be: LogToFile("User ID=" + UserID,"DEBUG-UserID");
	****/
  public static void LogToFile(string sMessage, string sFileName="", bool fAppendToFile=true, bool fAddDateTime=true ) {
    string sPath="", sAdd="";
	if (fAddDateTime==true) { sAdd="-" + DateTime.Now.ToString("yyyMMddhhmmss"); }
	if (!string.IsNullOrEmpty(sFileName)) {
		sPath=sFileName + sAdd;
		if (sPath.IndexOf(".")<0) { sPath=sPath + ".txt"; }
		if (sPath.IndexOf("\\")<0) { sPath=SITE.LogFolder + "\\" + sPath; }
		}
	else { 
		sPath=SITE.LogFolder + "\\LOG" + sAdd + ".txt";
		}
	try {
		using (StreamWriter sOut = new StreamWriter(sPath,fAppendToFile)) {
			sOut.WriteLine(sMessage);
			}
		} catch {}
  }
  
	public static string NoBracket(string sData) {
		return sData.Replace("`","").Replace("[","").Replace("]","");
	}
	
	public static string javaJSONstr(string sData) {
		// This routine cleans a string and makes it ready for JSON in javascript
		// It needs to handle any special characters that need to be escaped in order to be passed back to javascript via an AJAX call
		return sData.Replace("\"","\\\"");
	}

	public static string nbsp(string val) {
		return IfNull(val,"&nbsp;");
		}
		
	public static string IfNull(string val,string defaultVal) {
		if (!String.IsNullOrEmpty(val)) { return val;}
		return defaultVal;
		}
		
	public static int ToInt(string strValue, int defaultVal=0) {
		try { return System.Convert.ToInt32(strValue); } catch { }
		return defaultVal;
		}
		
	public static double ToDbl(string val,double defaultVal=0) {
		try { return Convert.ToDouble(val); } catch { }
		return defaultVal;
		}
		
	public static string Right(string val, int numChars)
	{
		if (val==null) return val;
		if (numChars<=0) return "";
		if (numChars>=val.Length) return val;
		return val.Substring(val.Length - numChars);
	}
	
	public static string Left(string val, int numChars)
	{
		if (val==null) return val;
		if (numChars<=0) return "";
		if (numChars>=val.Length) return val;
		return val.Substring(0,numChars);
	}
	
	// UNLIKE VB - "start" IS ZERO BASED
	public static string Mid(string val, int start)
	{
		if (val==null) return val;
		if ((start<0)||(start>=val.Length)) return "";
		return val.Substring(start);
	}
	public static string Mid(string val, int start, int numChars)
	{
		if (val==null) return val;
		if ((numChars<=0)||(start<0)||(start>=val.Length)) return "";
		if ((start+numChars)<=val.Length) return val.Substring(start,numChars);
		return val.Substring(start);
	}
	
	public static void ReplaceUnicode(bool ReplaceWithHTML, ref string unicodeString) {
		bool modified = false;
		StringBuilder sb = new StringBuilder(unicodeString.Length);// we may extend past this length, but this is a good place to start
		foreach(char c in unicodeString)
		  switch(c)
		  {
			case '\u2013': case '\u2014': case '\u2015': // dash
			  sb.Append('-'); modified=true;
			  break;
			case '\u2018': // left single quote
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&lsquo;"); }
			  else { sb.Append('\''); }
			  break;
			case '\u2019': // right single quote
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&rsquo;"); }
			  else { sb.Append('\''); }
			  break;
			case '\u201A': // single low-9 quote
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&sbquo;"); }
			  else { sb.Append('\''); }
			  break;
			case '\u201C': // left double quote
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&ldquo;"); }
			  else { sb.Append('"'); }
			  break;
			case '\u201D': // right double quote
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&rdquo;"); }
			  else { sb.Append('"'); }
			  break;
			case '\u201E': // double low-9 quote
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&bdquo;"); }
			  else { sb.Append('"'); }
			  break;
			case '\u2020': // dagger
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&dagger;"); }
			  else { sb.Append((char)134); }
			  break;
			case '\u2021': // double dagger
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&Dagger;"); }
			  else { sb.Append((char)135); }
			  break;
			case '\u2022': // bullet
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&bull;"); }
			  else { sb.Append((char)183); }
			  break;
			case '\u2026': // ellipsis
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&hellip;"); }
			  else { sb.Append((char)133); }
			  break;
			case '\u20AC': // euro
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&euro;"); }
			  else { sb.Append((char)128); }
			  break;
			case '\u2122': // trademark
			  modified=true; 
			  if (ReplaceWithHTML) { sb.Append("&trade;"); }
			  else { sb.Append((char)153); }
			  break;
			default:
			  sb.Append(c);
			  break;
		  }
		if (modified) { unicodeString = sb.ToString(); }
	}
	
	public static string[] SplitTags(string inputString) {
		try
		{

			if (inputString == null)
			{
				return new string[] { "" };
			}

			int colonFirstIndex = inputString.IndexOf(':');
			int vBarFirstIndex = inputString.IndexOf('|');

			if (colonFirstIndex == -1 && vBarFirstIndex == -1)
			{
				return new string[] { "" };
			}

			char splitChar = ' ';

			if (colonFirstIndex != -1 && (colonFirstIndex < vBarFirstIndex || vBarFirstIndex == -1))
			{
				splitChar = ':';
			}

			if (vBarFirstIndex != -1 && (vBarFirstIndex < colonFirstIndex || colonFirstIndex == -1))
			{
				splitChar = '|';
			}

			string[] result = inputString.Split(new char[] { splitChar });

			for (int i = 0; i < result.Length; i++)
			{
				result[i] = result[i].Trim();

				if (result[i][0] == '\'' || result[i][0] == '\"')
				{
					result[i] = result[i].Remove(result[i].Length - 1, 1);
					result[i] = result[i].Remove(0, 1);
				}
			}

			return result;
		}
		catch (Exception)
		{
			return new string[] { "" };
		}
	} // end function


//	public static string Sanitize(string stringValue, int truncateLength=-1 )
//    {
//        if (null == stringValue)
//            return stringValue;
//
//        stringValue = RegexReplace(stringValue, "-{2,}", "-");
//        stringValue = RegexReplace(stringValue, @"[*/]+", string.Empty);      // removes / and * used also to comment in sql scripts
//        stringValue = RegexReplace(stringValue, @"(;|\s)(exec|execute|select|insert|update|delete|create|alter|drop|rename|truncate|backup|restore)\s", string.Empty, RegexOptions.IgnoreCase);
//
//		// Truncate length if greater than specified max length. (if truncateLength<=0 then do nothing)
//		if (truncateLength>0) { if (stringValue.Length > truncateLength) { stringValue=stringValue.Substring(0,truncateLength); } }
//
//		return stringValue;
//    }

 }

</script>